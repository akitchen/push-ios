// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 46;
	objects = {

/* Begin PBXBuildFile section */
		F114D2731908429E0008BE3C /* PCFPushClient.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2711908429E0008BE3C /* PCFPushClient.m */; };
		F114D2741908429E0008BE3C /* PCFPushClient.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2721908429E0008BE3C /* PCFPushClient.h */; settings = {ATTRIBUTES = (Public, ); }; };
		F114D2CF190AA87A0008BE3C /* NSObject+PCFJsonizable.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2A7190AA87A0008BE3C /* NSObject+PCFJsonizable.h */; };
		F114D2D0190AA87A0008BE3C /* NSObject+PCFJsonizable.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2A8190AA87A0008BE3C /* NSObject+PCFJsonizable.m */; };
		F114D2D1190AA87A0008BE3C /* PCFAppDelegate.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2A9190AA87A0008BE3C /* PCFAppDelegate.h */; };
		F114D2D2190AA87A0008BE3C /* PCFAppDelegate.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2AA190AA87A0008BE3C /* PCFAppDelegate.m */; };
		F114D2D3190AA87A0008BE3C /* PCFAppDelegateProxy.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2AB190AA87A0008BE3C /* PCFAppDelegateProxy.h */; };
		F114D2D4190AA87A0008BE3C /* PCFAppDelegateProxy.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2AC190AA87A0008BE3C /* PCFAppDelegateProxy.m */; };
		F114D2D5190AA87A0008BE3C /* PCFClient.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2AD190AA87A0008BE3C /* PCFClient.h */; settings = {ATTRIBUTES = (Public, ); }; };
		F114D2D6190AA87A0008BE3C /* PCFClient.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2AE190AA87A0008BE3C /* PCFClient.m */; };
		F114D2D7190AA87A0008BE3C /* PCFParameters.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2AF190AA87A0008BE3C /* PCFParameters.h */; settings = {ATTRIBUTES = (Public, ); }; };
		F114D2D8190AA87A0008BE3C /* PCFParameters.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2B0190AA87A0008BE3C /* PCFParameters.m */; };
		F114D2D9190AA87A0008BE3C /* PCFSDK.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2B1190AA87A0008BE3C /* PCFSDK.h */; settings = {ATTRIBUTES = (Public, ); }; };
		F114D2DA190AA87A0008BE3C /* PCFSDK.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2B2190AA87A0008BE3C /* PCFSDK.m */; };
		F114D2DC190AA87A0008BE3C /* PCFSortDescriptors.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2B5190AA87A0008BE3C /* PCFSortDescriptors.h */; };
		F114D2DD190AA87A0008BE3C /* PCFJSONValueTransformer.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2B7190AA87A0008BE3C /* PCFJSONValueTransformer.h */; };
		F114D2DE190AA87A0008BE3C /* PCFJSONValueTransformer.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2B8190AA87A0008BE3C /* PCFJSONValueTransformer.m */; };
		F114D2DF190AA87A0008BE3C /* PCFPushDebug.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2B9190AA87A0008BE3C /* PCFPushDebug.h */; settings = {ATTRIBUTES = (Public, ); }; };
		F114D2E0190AA87A0008BE3C /* PCFPushDebug.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2BA190AA87A0008BE3C /* PCFPushDebug.m */; };
		F114D2E1190AA87A0008BE3C /* PCFPushErrorUtil.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2BB190AA87A0008BE3C /* PCFPushErrorUtil.h */; };
		F114D2E2190AA87A0008BE3C /* PCFPushErrorUtil.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2BC190AA87A0008BE3C /* PCFPushErrorUtil.m */; };
		F114D2E3190AA87A0008BE3C /* PCFHardwareUtil.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2BD190AA87A0008BE3C /* PCFHardwareUtil.h */; };
		F114D2E4190AA87A0008BE3C /* PCFHardwareUtil.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2BE190AA87A0008BE3C /* PCFHardwareUtil.m */; };
		F114D2E5190AA87A0008BE3C /* PCFPushHexUtil.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2BF190AA87A0008BE3C /* PCFPushHexUtil.h */; };
		F114D2E6190AA87A0008BE3C /* PCFPushHexUtil.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2C0190AA87A0008BE3C /* PCFPushHexUtil.m */; };
		F114D2E7190AA87A0008BE3C /* PCFPushAppDelegate+Analytics.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2C3190AA87A0008BE3C /* PCFPushAppDelegate+Analytics.h */; };
		F114D2E8190AA87A0008BE3C /* PCFPushAppDelegate+Analytics.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2C4190AA87A0008BE3C /* PCFPushAppDelegate+Analytics.m */; };
		F114D2E9190AA87A0008BE3C /* PCFAnalyticsURLConnection.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2C6190AA87A0008BE3C /* PCFAnalyticsURLConnection.h */; };
		F114D2EA190AA87A0008BE3C /* PCFAnalyticsURLConnection.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2C7190AA87A0008BE3C /* PCFAnalyticsURLConnection.m */; };
		F114D2EB190AA87A0008BE3C /* PCFAnalyticEvent.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2C9190AA87A0008BE3C /* PCFAnalyticEvent.h */; };
		F114D2EC190AA87A0008BE3C /* PCFAnalyticEvent.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2CA190AA87A0008BE3C /* PCFAnalyticEvent.m */; };
		F114D2ED190AA87A0008BE3C /* PCFCoreDataManager.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2CB190AA87A0008BE3C /* PCFCoreDataManager.h */; };
		F114D2EE190AA87A0008BE3C /* PCFCoreDataManager.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2CC190AA87A0008BE3C /* PCFCoreDataManager.m */; };
		F114D2EF190AA87A0008BE3C /* PCFAnalytics.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2CD190AA87A0008BE3C /* PCFAnalytics.h */; settings = {ATTRIBUTES = (Public, ); }; };
		F114D2F0190AA87A0008BE3C /* PCFAnalytics.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2CE190AA87A0008BE3C /* PCFAnalytics.m */; };
		F114D315190AF1050008BE3C /* PCFMapping.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D314190AF1050008BE3C /* PCFMapping.h */; };
		F114D318190AF1110008BE3C /* PCFPersistentStorage.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D316190AF1110008BE3C /* PCFPersistentStorage.h */; };
		F114D319190AF1110008BE3C /* PCFPersistentStorage.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D317190AF1110008BE3C /* PCFPersistentStorage.m */; };
		F114D31C190AF13E0008BE3C /* PCFPersistentStorage+Push.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D31A190AF13E0008BE3C /* PCFPersistentStorage+Push.h */; };
		F114D31D190AF13E0008BE3C /* PCFPersistentStorage+Push.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D31B190AF13E0008BE3C /* PCFPersistentStorage+Push.m */; };
		F114D321190AF2440008BE3C /* PCFPersistentStorage+Analytics.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D31F190AF2440008BE3C /* PCFPersistentStorage+Analytics.h */; };
		F114D322190AF2440008BE3C /* PCFPersistentStorage+Analytics.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D320190AF2440008BE3C /* PCFPersistentStorage+Analytics.m */; };
		F114D325190AF24B0008BE3C /* PCFSDK+Analytics.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D323190AF24B0008BE3C /* PCFSDK+Analytics.h */; };
		F114D326190AF24B0008BE3C /* PCFSDK+Analytics.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D324190AF24B0008BE3C /* PCFSDK+Analytics.m */; };
		F114D333190EA7700008BE3C /* PCFPushURLConnection.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D331190EA7700008BE3C /* PCFPushURLConnection.h */; };
		F114D334190EA7700008BE3C /* PCFPushURLConnection.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D332190EA7700008BE3C /* PCFPushURLConnection.m */; };
		F18761E1191C03D00069B9B2 /* PCFNotifications.h in Headers */ = {isa = PBXBuildFile; fileRef = F18761DF191C03CF0069B9B2 /* PCFNotifications.h */; };
		F18761E2191C03D00069B9B2 /* PCFNotifications.m in Sources */ = {isa = PBXBuildFile; fileRef = F18761E0191C03CF0069B9B2 /* PCFNotifications.m */; };
		F1899FB51911A21100327394 /* NSURLConnection+PCFBackEndConnection.h in Headers */ = {isa = PBXBuildFile; fileRef = F1899FB31911A21100327394 /* NSURLConnection+PCFBackEndConnection.h */; };
		F1899FB61911A21100327394 /* NSURLConnection+PCFBackEndConnection.m in Sources */ = {isa = PBXBuildFile; fileRef = F1899FB41911A21100327394 /* NSURLConnection+PCFBackEndConnection.m */; };
		F18D89C418E5D6610084D142 /* PCFPushRegistrationData.h in Headers */ = {isa = PBXBuildFile; fileRef = F18D89A018E5D6610084D142 /* PCFPushRegistrationData.h */; };
		F18D89C518E5D6610084D142 /* PCFPushRegistrationData.m in Sources */ = {isa = PBXBuildFile; fileRef = F18D89A118E5D6610084D142 /* PCFPushRegistrationData.m */; };
		F18D89C618E5D6610084D142 /* PCFPushRegistrationRequestData.h in Headers */ = {isa = PBXBuildFile; fileRef = F18D89A218E5D6610084D142 /* PCFPushRegistrationRequestData.h */; };
		F18D89C718E5D6610084D142 /* PCFPushRegistrationRequestData.m in Sources */ = {isa = PBXBuildFile; fileRef = F18D89A318E5D6610084D142 /* PCFPushRegistrationRequestData.m */; };
		F18D89C818E5D6610084D142 /* PCFPushRegistrationResponseData.h in Headers */ = {isa = PBXBuildFile; fileRef = F18D89A418E5D6610084D142 /* PCFPushRegistrationResponseData.h */; };
		F18D89C918E5D6610084D142 /* PCFPushRegistrationResponseData.m in Sources */ = {isa = PBXBuildFile; fileRef = F18D89A518E5D6610084D142 /* PCFPushRegistrationResponseData.m */; };
		F18D89CA18E5D6610084D142 /* PCFPushSDK.h in Headers */ = {isa = PBXBuildFile; fileRef = F18D89A618E5D6610084D142 /* PCFPushSDK.h */; settings = {ATTRIBUTES = (Public, ); }; };
		F18D89CB18E5D6610084D142 /* PCFPushSDK.m in Sources */ = {isa = PBXBuildFile; fileRef = F18D89A718E5D6610084D142 /* PCFPushSDK.m */; };
		F1B600F91922A0A300B65371 /* PCFPersistentStorage+Analytics.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D320190AF2440008BE3C /* PCFPersistentStorage+Analytics.m */; };
		F1B600FB1922A0A300B65371 /* PCFAnalyticsURLConnection.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2C7190AA87A0008BE3C /* PCFAnalyticsURLConnection.m */; };
		F1B600FE1922A0A300B65371 /* PCFAppDelegateProxy.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2AC190AA87A0008BE3C /* PCFAppDelegateProxy.m */; };
		F1B600FF1922A0A300B65371 /* PCFCoreDataManager.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2CC190AA87A0008BE3C /* PCFCoreDataManager.m */; };
		F1B601001922A0A300B65371 /* PCFPushErrorUtil.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2BC190AA87A0008BE3C /* PCFPushErrorUtil.m */; };
		F1B601011922A0A300B65371 /* PCFAnalytics.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2CE190AA87A0008BE3C /* PCFAnalytics.m */; };
		F1B601021922A0A300B65371 /* PCFHardwareUtil.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2BE190AA87A0008BE3C /* PCFHardwareUtil.m */; };
		F1B601031922A0A300B65371 /* PCFAnalyticEvent.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2CA190AA87A0008BE3C /* PCFAnalyticEvent.m */; };
		F1B601041922A0A300B65371 /* PCFPersistentStorage.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D317190AF1110008BE3C /* PCFPersistentStorage.m */; };
		F1B601051922A0A300B65371 /* NSObject+PCFJsonizable.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2A8190AA87A0008BE3C /* NSObject+PCFJsonizable.m */; };
		F1B601071922A0A300B65371 /* PCFPushAppDelegate+Analytics.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2C4190AA87A0008BE3C /* PCFPushAppDelegate+Analytics.m */; };
		F1B601091922A0A300B65371 /* PCFParameters.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2B0190AA87A0008BE3C /* PCFParameters.m */; };
		F1B6010A1922A0A300B65371 /* PCFSDK+Analytics.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D324190AF24B0008BE3C /* PCFSDK+Analytics.m */; };
		F1B6010C1922A0A300B65371 /* PCFPushDebug.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2BA190AA87A0008BE3C /* PCFPushDebug.m */; };
		F1B6010D1922A0A300B65371 /* PCFNotifications.m in Sources */ = {isa = PBXBuildFile; fileRef = F18761E0191C03CF0069B9B2 /* PCFNotifications.m */; };
		F1B6010E1922A0A300B65371 /* NSURLConnection+PCFBackEndConnection.m in Sources */ = {isa = PBXBuildFile; fileRef = F1899FB41911A21100327394 /* NSURLConnection+PCFBackEndConnection.m */; };
		F1B6010F1922A0A300B65371 /* PCFJSONValueTransformer.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2B8190AA87A0008BE3C /* PCFJSONValueTransformer.m */; };
		F1B601111922A0A300B65371 /* PCFAppDelegate.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2AA190AA87A0008BE3C /* PCFAppDelegate.m */; };
		F1B601121922A0A300B65371 /* PCFClient.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2AE190AA87A0008BE3C /* PCFClient.m */; };
		F1B601131922A0A300B65371 /* PCFPushClient.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2711908429E0008BE3C /* PCFPushClient.m */; };
		F1B601141922A0A300B65371 /* PCFSDK.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2B2190AA87A0008BE3C /* PCFSDK.m */; };
		F1B601171922A0A300B65371 /* PCFSDK+Analytics.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D323190AF24B0008BE3C /* PCFSDK+Analytics.h */; };
		F1B6011A1922A0A300B65371 /* PCFAnalytics.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2CD190AA87A0008BE3C /* PCFAnalytics.h */; settings = {ATTRIBUTES = (Public, ); }; };
		F1B6011B1922A0A300B65371 /* PCFClient.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2AD190AA87A0008BE3C /* PCFClient.h */; settings = {ATTRIBUTES = (Public, ); }; };
		F1B6011C1922A0A300B65371 /* PCFParameters.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2AF190AA87A0008BE3C /* PCFParameters.h */; settings = {ATTRIBUTES = (Public, ); }; };
		F1B6011D1922A0A300B65371 /* PCFSDK.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2B1190AA87A0008BE3C /* PCFSDK.h */; settings = {ATTRIBUTES = (Public, ); }; };
		F1B6011E1922A0A300B65371 /* NSURLConnection+PCFBackEndConnection.h in Headers */ = {isa = PBXBuildFile; fileRef = F1899FB31911A21100327394 /* NSURLConnection+PCFBackEndConnection.h */; };
		F1B6011F1922A0A300B65371 /* PCFPushClient.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2721908429E0008BE3C /* PCFPushClient.h */; settings = {ATTRIBUTES = (Public, ); }; };
		F1B601201922A0A300B65371 /* PCFPushDebug.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2B9190AA87A0008BE3C /* PCFPushDebug.h */; settings = {ATTRIBUTES = (Public, ); }; };
		F1B601211922A0A300B65371 /* NSObject+PCFJsonizable.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2A7190AA87A0008BE3C /* NSObject+PCFJsonizable.h */; };
		F1B601221922A0A300B65371 /* PCFAnalyticsURLConnection.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2C6190AA87A0008BE3C /* PCFAnalyticsURLConnection.h */; };
		F1B601231922A0A300B65371 /* PCFJSONValueTransformer.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2B7190AA87A0008BE3C /* PCFJSONValueTransformer.h */; };
		F1B601241922A0A300B65371 /* PCFMapping.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D314190AF1050008BE3C /* PCFMapping.h */; };
		F1B601251922A0A300B65371 /* PCFPushErrorUtil.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2BB190AA87A0008BE3C /* PCFPushErrorUtil.h */; };
		F1B601281922A0A300B65371 /* PCFPushHexUtil.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2BF190AA87A0008BE3C /* PCFPushHexUtil.h */; };
		F1B6012B1922A0A300B65371 /* PCFPersistentStorage.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D316190AF1110008BE3C /* PCFPersistentStorage.h */; };
		F1B6012C1922A0A300B65371 /* PCFAnalyticEvent.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2C9190AA87A0008BE3C /* PCFAnalyticEvent.h */; };
		F1B6012D1922A0A300B65371 /* PCFAppDelegate.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2A9190AA87A0008BE3C /* PCFAppDelegate.h */; };
		F1B6012F1922A0A300B65371 /* PCFPersistentStorage+Push.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D31A190AF13E0008BE3C /* PCFPersistentStorage+Push.h */; };
		F1B601301922A0A300B65371 /* PCFCoreDataManager.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2CB190AA87A0008BE3C /* PCFCoreDataManager.h */; };
		F1B601311922A0A300B65371 /* PCFSortDescriptors.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2B5190AA87A0008BE3C /* PCFSortDescriptors.h */; };
		F1B601321922A0A300B65371 /* PCFNotifications.h in Headers */ = {isa = PBXBuildFile; fileRef = F18761DF191C03CF0069B9B2 /* PCFNotifications.h */; };
		F1B601331922A0A300B65371 /* PCFPersistentStorage+Analytics.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D31F190AF2440008BE3C /* PCFPersistentStorage+Analytics.h */; };
		F1B601341922A0A300B65371 /* PCFAppDelegateProxy.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2AB190AA87A0008BE3C /* PCFAppDelegateProxy.h */; };
		F1B601351922A0A300B65371 /* PCFPushAppDelegate+Analytics.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2C3190AA87A0008BE3C /* PCFPushAppDelegate+Analytics.h */; };
		F1B601421922A12500B65371 /* PCFPushSDK.m in Sources */ = {isa = PBXBuildFile; fileRef = F18D89A718E5D6610084D142 /* PCFPushSDK.m */; };
		F1B601441922A12500B65371 /* PCFPushURLConnection.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D332190EA7700008BE3C /* PCFPushURLConnection.m */; };
		F1B601451922A12500B65371 /* PCFPersistentStorage+Push.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D31B190AF13E0008BE3C /* PCFPersistentStorage+Push.m */; };
		F1B601461922A12500B65371 /* PCFAppDelegateProxy.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2AC190AA87A0008BE3C /* PCFAppDelegateProxy.m */; };
		F1B601481922A12500B65371 /* PCFPushErrorUtil.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2BC190AA87A0008BE3C /* PCFPushErrorUtil.m */; };
		F1B6014A1922A12500B65371 /* PCFHardwareUtil.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2BE190AA87A0008BE3C /* PCFHardwareUtil.m */; };
		F1B6014C1922A12500B65371 /* PCFPersistentStorage.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D317190AF1110008BE3C /* PCFPersistentStorage.m */; };
		F1B6014D1922A12500B65371 /* NSObject+PCFJsonizable.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2A8190AA87A0008BE3C /* NSObject+PCFJsonizable.m */; };
		F1B6014E1922A12500B65371 /* PCFPushRegistrationResponseData.m in Sources */ = {isa = PBXBuildFile; fileRef = F18D89A518E5D6610084D142 /* PCFPushRegistrationResponseData.m */; };
		F1B601501922A12500B65371 /* PCFPushHexUtil.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2C0190AA87A0008BE3C /* PCFPushHexUtil.m */; };
		F1B601511922A12500B65371 /* PCFParameters.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2B0190AA87A0008BE3C /* PCFParameters.m */; };
		F1B601531922A12500B65371 /* PCFPushRegistrationRequestData.m in Sources */ = {isa = PBXBuildFile; fileRef = F18D89A318E5D6610084D142 /* PCFPushRegistrationRequestData.m */; };
		F1B601541922A12500B65371 /* PCFPushDebug.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2BA190AA87A0008BE3C /* PCFPushDebug.m */; };
		F1B601551922A12500B65371 /* PCFNotifications.m in Sources */ = {isa = PBXBuildFile; fileRef = F18761E0191C03CF0069B9B2 /* PCFNotifications.m */; };
		F1B601561922A12500B65371 /* NSURLConnection+PCFBackEndConnection.m in Sources */ = {isa = PBXBuildFile; fileRef = F1899FB41911A21100327394 /* NSURLConnection+PCFBackEndConnection.m */; };
		F1B601571922A12500B65371 /* PCFJSONValueTransformer.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2B8190AA87A0008BE3C /* PCFJSONValueTransformer.m */; };
		F1B601581922A12500B65371 /* PCFPushRegistrationData.m in Sources */ = {isa = PBXBuildFile; fileRef = F18D89A118E5D6610084D142 /* PCFPushRegistrationData.m */; };
		F1B601591922A12500B65371 /* PCFAppDelegate.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2AA190AA87A0008BE3C /* PCFAppDelegate.m */; };
		F1B6015A1922A12500B65371 /* PCFClient.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2AE190AA87A0008BE3C /* PCFClient.m */; };
		F1B6015B1922A12500B65371 /* PCFPushClient.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2711908429E0008BE3C /* PCFPushClient.m */; };
		F1B6015C1922A12500B65371 /* PCFSDK.m in Sources */ = {isa = PBXBuildFile; fileRef = F114D2B2190AA87A0008BE3C /* PCFSDK.m */; };
		F1B601601922A12500B65371 /* PCFPushSDK.h in Headers */ = {isa = PBXBuildFile; fileRef = F18D89A618E5D6610084D142 /* PCFPushSDK.h */; settings = {ATTRIBUTES = (Public, ); }; };
		F1B601631922A12500B65371 /* PCFClient.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2AD190AA87A0008BE3C /* PCFClient.h */; settings = {ATTRIBUTES = (Public, ); }; };
		F1B601641922A12500B65371 /* PCFParameters.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2AF190AA87A0008BE3C /* PCFParameters.h */; settings = {ATTRIBUTES = (Public, ); }; };
		F1B601651922A12500B65371 /* PCFSDK.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2B1190AA87A0008BE3C /* PCFSDK.h */; settings = {ATTRIBUTES = (Public, ); }; };
		F1B601661922A12500B65371 /* NSURLConnection+PCFBackEndConnection.h in Headers */ = {isa = PBXBuildFile; fileRef = F1899FB31911A21100327394 /* NSURLConnection+PCFBackEndConnection.h */; };
		F1B601671922A12500B65371 /* PCFPushClient.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2721908429E0008BE3C /* PCFPushClient.h */; settings = {ATTRIBUTES = (Public, ); }; };
		F1B601681922A12500B65371 /* PCFPushDebug.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2B9190AA87A0008BE3C /* PCFPushDebug.h */; settings = {ATTRIBUTES = (Public, ); }; };
		F1B601691922A12500B65371 /* NSObject+PCFJsonizable.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2A7190AA87A0008BE3C /* NSObject+PCFJsonizable.h */; };
		F1B6016B1922A12500B65371 /* PCFJSONValueTransformer.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2B7190AA87A0008BE3C /* PCFJSONValueTransformer.h */; };
		F1B6016C1922A12500B65371 /* PCFMapping.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D314190AF1050008BE3C /* PCFMapping.h */; };
		F1B6016D1922A12500B65371 /* PCFPushErrorUtil.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2BB190AA87A0008BE3C /* PCFPushErrorUtil.h */; };
		F1B6016E1922A12500B65371 /* PCFPushRegistrationRequestData.h in Headers */ = {isa = PBXBuildFile; fileRef = F18D89A218E5D6610084D142 /* PCFPushRegistrationRequestData.h */; };
		F1B6016F1922A12500B65371 /* PCFHardwareUtil.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2BD190AA87A0008BE3C /* PCFHardwareUtil.h */; };
		F1B601701922A12500B65371 /* PCFPushHexUtil.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2BF190AA87A0008BE3C /* PCFPushHexUtil.h */; };
		F1B601711922A12500B65371 /* PCFPushURLConnection.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D331190EA7700008BE3C /* PCFPushURLConnection.h */; };
		F1B601731922A12500B65371 /* PCFPersistentStorage.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D316190AF1110008BE3C /* PCFPersistentStorage.h */; };
		F1B601751922A12500B65371 /* PCFAppDelegate.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2A9190AA87A0008BE3C /* PCFAppDelegate.h */; };
		F1B601761922A12500B65371 /* PCFPushRegistrationData.h in Headers */ = {isa = PBXBuildFile; fileRef = F18D89A018E5D6610084D142 /* PCFPushRegistrationData.h */; };
		F1B601771922A12500B65371 /* PCFPersistentStorage+Push.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D31A190AF13E0008BE3C /* PCFPersistentStorage+Push.h */; };
		F1B601791922A12500B65371 /* PCFSortDescriptors.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2B5190AA87A0008BE3C /* PCFSortDescriptors.h */; };
		F1B6017A1922A12500B65371 /* PCFNotifications.h in Headers */ = {isa = PBXBuildFile; fileRef = F18761DF191C03CF0069B9B2 /* PCFNotifications.h */; };
		F1B6017C1922A12500B65371 /* PCFAppDelegateProxy.h in Headers */ = {isa = PBXBuildFile; fileRef = F114D2AB190AA87A0008BE3C /* PCFAppDelegateProxy.h */; };
		F1B6017E1922A12500B65371 /* PCFPushRegistrationResponseData.h in Headers */ = {isa = PBXBuildFile; fileRef = F18D89A418E5D6610084D142 /* PCFPushRegistrationResponseData.h */; };
		F1B601961923B29100B65371 /* PCFPushErrors.h in Headers */ = {isa = PBXBuildFile; fileRef = F1B601951923B29100B65371 /* PCFPushErrors.h */; };
		F1B601971923B29100B65371 /* PCFPushErrors.h in Headers */ = {isa = PBXBuildFile; fileRef = F1B601951923B29100B65371 /* PCFPushErrors.h */; };
		F1B601981923B29100B65371 /* PCFPushErrors.h in Headers */ = {isa = PBXBuildFile; fileRef = F1B601951923B29100B65371 /* PCFPushErrors.h */; };
		F1B6019E1923B6EA00B65371 /* InfoPlist.strings in Resources */ = {isa = PBXBuildFile; fileRef = F1B6019A1923B6EA00B65371 /* InfoPlist.strings */; };
		F1B6019F1923B6EA00B65371 /* InfoPlist.strings in Resources */ = {isa = PBXBuildFile; fileRef = F1B6019A1923B6EA00B65371 /* InfoPlist.strings */; };
		F1B601A01923B6EA00B65371 /* InfoPlist.strings in Resources */ = {isa = PBXBuildFile; fileRef = F1B6019A1923B6EA00B65371 /* InfoPlist.strings */; };
		F1B601A11923B6EA00B65371 /* PCFCompleteSDK-Info.plist in Resources */ = {isa = PBXBuildFile; fileRef = F1B6019C1923B6EA00B65371 /* PCFCompleteSDK-Info.plist */; };
		F1B601A21923B6EA00B65371 /* PCFCompleteSDK-Info.plist in Resources */ = {isa = PBXBuildFile; fileRef = F1B6019C1923B6EA00B65371 /* PCFCompleteSDK-Info.plist */; };
		F1B601A31923B6EA00B65371 /* PCFCompleteSDK-Info.plist in Resources */ = {isa = PBXBuildFile; fileRef = F1B6019C1923B6EA00B65371 /* PCFCompleteSDK-Info.plist */; };
		F1B601A41923B6EA00B65371 /* PCFCompleteSDK-Prefix.pch in Headers */ = {isa = PBXBuildFile; fileRef = F1B6019D1923B6EA00B65371 /* PCFCompleteSDK-Prefix.pch */; };
		F1B601A51923B6EA00B65371 /* PCFCompleteSDK-Prefix.pch in Headers */ = {isa = PBXBuildFile; fileRef = F1B6019D1923B6EA00B65371 /* PCFCompleteSDK-Prefix.pch */; };
		F1B601A61923B6EA00B65371 /* PCFCompleteSDK-Prefix.pch in Headers */ = {isa = PBXBuildFile; fileRef = F1B6019D1923B6EA00B65371 /* PCFCompleteSDK-Prefix.pch */; };
/* End PBXBuildFile section */

/* Begin PBXFileReference section */
		D4E8A808185BAFDC00A841EE /* PCFCompleteSDK.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework.static; includeInIndex = 0; path = PCFCompleteSDK.framework; sourceTree = BUILT_PRODUCTS_DIR; };
		F114D2711908429E0008BE3C /* PCFPushClient.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = PCFPushClient.m; sourceTree = "<group>"; };
		F114D2721908429E0008BE3C /* PCFPushClient.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PCFPushClient.h; sourceTree = "<group>"; };
		F114D2A7190AA87A0008BE3C /* NSObject+PCFJsonizable.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "NSObject+PCFJsonizable.h"; sourceTree = "<group>"; };
		F114D2A8190AA87A0008BE3C /* NSObject+PCFJsonizable.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "NSObject+PCFJsonizable.m"; sourceTree = "<group>"; };
		F114D2A9190AA87A0008BE3C /* PCFAppDelegate.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PCFAppDelegate.h; sourceTree = "<group>"; };
		F114D2AA190AA87A0008BE3C /* PCFAppDelegate.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = PCFAppDelegate.m; sourceTree = "<group>"; };
		F114D2AB190AA87A0008BE3C /* PCFAppDelegateProxy.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PCFAppDelegateProxy.h; sourceTree = "<group>"; };
		F114D2AC190AA87A0008BE3C /* PCFAppDelegateProxy.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = PCFAppDelegateProxy.m; sourceTree = "<group>"; };
		F114D2AD190AA87A0008BE3C /* PCFClient.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PCFClient.h; sourceTree = "<group>"; };
		F114D2AE190AA87A0008BE3C /* PCFClient.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = PCFClient.m; sourceTree = "<group>"; };
		F114D2AF190AA87A0008BE3C /* PCFParameters.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PCFParameters.h; sourceTree = "<group>"; };
		F114D2B0190AA87A0008BE3C /* PCFParameters.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = PCFParameters.m; sourceTree = "<group>"; };
		F114D2B1190AA87A0008BE3C /* PCFSDK.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PCFSDK.h; sourceTree = "<group>"; };
		F114D2B2190AA87A0008BE3C /* PCFSDK.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = PCFSDK.m; sourceTree = "<group>"; };
		F114D2B5190AA87A0008BE3C /* PCFSortDescriptors.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PCFSortDescriptors.h; sourceTree = "<group>"; };
		F114D2B7190AA87A0008BE3C /* PCFJSONValueTransformer.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PCFJSONValueTransformer.h; sourceTree = "<group>"; };
		F114D2B8190AA87A0008BE3C /* PCFJSONValueTransformer.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = PCFJSONValueTransformer.m; sourceTree = "<group>"; };
		F114D2B9190AA87A0008BE3C /* PCFPushDebug.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PCFPushDebug.h; sourceTree = "<group>"; };
		F114D2BA190AA87A0008BE3C /* PCFPushDebug.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = PCFPushDebug.m; sourceTree = "<group>"; };
		F114D2BB190AA87A0008BE3C /* PCFPushErrorUtil.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PCFPushErrorUtil.h; sourceTree = "<group>"; };
		F114D2BC190AA87A0008BE3C /* PCFPushErrorUtil.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = PCFPushErrorUtil.m; sourceTree = "<group>"; };
		F114D2BD190AA87A0008BE3C /* PCFHardwareUtil.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PCFHardwareUtil.h; sourceTree = "<group>"; };
		F114D2BE190AA87A0008BE3C /* PCFHardwareUtil.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = PCFHardwareUtil.m; sourceTree = "<group>"; };
		F114D2BF190AA87A0008BE3C /* PCFPushHexUtil.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PCFPushHexUtil.h; sourceTree = "<group>"; };
		F114D2C0190AA87A0008BE3C /* PCFPushHexUtil.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = PCFPushHexUtil.m; sourceTree = "<group>"; };
		F114D2C3190AA87A0008BE3C /* PCFPushAppDelegate+Analytics.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "PCFPushAppDelegate+Analytics.h"; sourceTree = "<group>"; };
		F114D2C4190AA87A0008BE3C /* PCFPushAppDelegate+Analytics.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "PCFPushAppDelegate+Analytics.m"; sourceTree = "<group>"; };
		F114D2C6190AA87A0008BE3C /* PCFAnalyticsURLConnection.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PCFAnalyticsURLConnection.h; sourceTree = "<group>"; };
		F114D2C7190AA87A0008BE3C /* PCFAnalyticsURLConnection.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = PCFAnalyticsURLConnection.m; sourceTree = "<group>"; };
		F114D2C9190AA87A0008BE3C /* PCFAnalyticEvent.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PCFAnalyticEvent.h; sourceTree = "<group>"; };
		F114D2CA190AA87A0008BE3C /* PCFAnalyticEvent.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = PCFAnalyticEvent.m; sourceTree = "<group>"; };
		F114D2CB190AA87A0008BE3C /* PCFCoreDataManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PCFCoreDataManager.h; sourceTree = "<group>"; };
		F114D2CC190AA87A0008BE3C /* PCFCoreDataManager.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = PCFCoreDataManager.m; sourceTree = "<group>"; };
		F114D2CD190AA87A0008BE3C /* PCFAnalytics.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PCFAnalytics.h; sourceTree = "<group>"; };
		F114D2CE190AA87A0008BE3C /* PCFAnalytics.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = PCFAnalytics.m; sourceTree = "<group>"; };
		F114D314190AF1050008BE3C /* PCFMapping.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PCFMapping.h; sourceTree = "<group>"; };
		F114D316190AF1110008BE3C /* PCFPersistentStorage.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PCFPersistentStorage.h; sourceTree = "<group>"; };
		F114D317190AF1110008BE3C /* PCFPersistentStorage.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = PCFPersistentStorage.m; sourceTree = "<group>"; };
		F114D31A190AF13E0008BE3C /* PCFPersistentStorage+Push.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "PCFPersistentStorage+Push.h"; sourceTree = "<group>"; };
		F114D31B190AF13E0008BE3C /* PCFPersistentStorage+Push.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "PCFPersistentStorage+Push.m"; sourceTree = "<group>"; };
		F114D31F190AF2440008BE3C /* PCFPersistentStorage+Analytics.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "PCFPersistentStorage+Analytics.h"; sourceTree = "<group>"; };
		F114D320190AF2440008BE3C /* PCFPersistentStorage+Analytics.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "PCFPersistentStorage+Analytics.m"; sourceTree = "<group>"; };
		F114D323190AF24B0008BE3C /* PCFSDK+Analytics.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "PCFSDK+Analytics.h"; sourceTree = "<group>"; };
		F114D324190AF24B0008BE3C /* PCFSDK+Analytics.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "PCFSDK+Analytics.m"; sourceTree = "<group>"; };
		F114D331190EA7700008BE3C /* PCFPushURLConnection.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PCFPushURLConnection.h; sourceTree = "<group>"; };
		F114D332190EA7700008BE3C /* PCFPushURLConnection.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = PCFPushURLConnection.m; sourceTree = "<group>"; };
		F18761DF191C03CF0069B9B2 /* PCFNotifications.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PCFNotifications.h; sourceTree = "<group>"; };
		F18761E0191C03CF0069B9B2 /* PCFNotifications.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = PCFNotifications.m; sourceTree = "<group>"; };
		F1899FB31911A21100327394 /* NSURLConnection+PCFBackEndConnection.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "NSURLConnection+PCFBackEndConnection.h"; sourceTree = "<group>"; };
		F1899FB41911A21100327394 /* NSURLConnection+PCFBackEndConnection.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "NSURLConnection+PCFBackEndConnection.m"; sourceTree = "<group>"; };
		F18D89A018E5D6610084D142 /* PCFPushRegistrationData.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PCFPushRegistrationData.h; sourceTree = "<group>"; };
		F18D89A118E5D6610084D142 /* PCFPushRegistrationData.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = PCFPushRegistrationData.m; sourceTree = "<group>"; };
		F18D89A218E5D6610084D142 /* PCFPushRegistrationRequestData.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PCFPushRegistrationRequestData.h; sourceTree = "<group>"; };
		F18D89A318E5D6610084D142 /* PCFPushRegistrationRequestData.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = PCFPushRegistrationRequestData.m; sourceTree = "<group>"; };
		F18D89A418E5D6610084D142 /* PCFPushRegistrationResponseData.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PCFPushRegistrationResponseData.h; sourceTree = "<group>"; };
		F18D89A518E5D6610084D142 /* PCFPushRegistrationResponseData.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = PCFPushRegistrationResponseData.m; sourceTree = "<group>"; };
		F18D89A618E5D6610084D142 /* PCFPushSDK.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PCFPushSDK.h; sourceTree = "<group>"; };
		F18D89A718E5D6610084D142 /* PCFPushSDK.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = PCFPushSDK.m; sourceTree = "<group>"; };
		F1B6013D1922A0A300B65371 /* PCFAnalyticsSDK.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework.static; includeInIndex = 0; path = PCFAnalyticsSDK.framework; sourceTree = BUILT_PRODUCTS_DIR; };
		F1B601851922A12500B65371 /* PCFPushSDK.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework.static; includeInIndex = 0; path = PCFPushSDK.framework; sourceTree = BUILT_PRODUCTS_DIR; };
		F1B601951923B29100B65371 /* PCFPushErrors.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PCFPushErrors.h; sourceTree = "<group>"; };
		F1B6019B1923B6EA00B65371 /* en */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = en; path = en.lproj/InfoPlist.strings; sourceTree = "<group>"; };
		F1B6019C1923B6EA00B65371 /* PCFCompleteSDK-Info.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.xml; path = "PCFCompleteSDK-Info.plist"; sourceTree = "<group>"; };
		F1B6019D1923B6EA00B65371 /* PCFCompleteSDK-Prefix.pch */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "PCFCompleteSDK-Prefix.pch"; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		D4E8A803185BAFDC00A841EE /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		F1B601151922A0A300B65371 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		F1B6015D1922A12500B65371 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		D4E8A7FD185BAFDC00A841EE = {
			isa = PBXGroup;
			children = (
				F1B601991923B6EA00B65371 /* PCFFramework */,
				F114D2A5190AA87A0008BE3C /* PCFSDK */,
				F114D2C1190AA87A0008BE3C /* PCFAnalytics */,
				F18D899018E5D6610084D142 /* PCFPush */,
				D4E8A809185BAFDC00A841EE /* Products */,
			);
			sourceTree = "<group>";
		};
		D4E8A809185BAFDC00A841EE /* Products */ = {
			isa = PBXGroup;
			children = (
				D4E8A808185BAFDC00A841EE /* PCFCompleteSDK.framework */,
				F1B6013D1922A0A300B65371 /* PCFAnalyticsSDK.framework */,
				F1B601851922A12500B65371 /* PCFPushSDK.framework */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		F114D2A5190AA87A0008BE3C /* PCFSDK */ = {
			isa = PBXGroup;
			children = (
				F114D327190E9FB60008BE3C /* BackEnd */,
				F114D2A6190AA87A0008BE3C /* Categories */,
				F114D2A9190AA87A0008BE3C /* PCFAppDelegate.h */,
				F114D2AA190AA87A0008BE3C /* PCFAppDelegate.m */,
				F114D2AB190AA87A0008BE3C /* PCFAppDelegateProxy.h */,
				F114D2AC190AA87A0008BE3C /* PCFAppDelegateProxy.m */,
				F114D2AD190AA87A0008BE3C /* PCFClient.h */,
				F114D2AE190AA87A0008BE3C /* PCFClient.m */,
				F114D2AF190AA87A0008BE3C /* PCFParameters.h */,
				F114D2B0190AA87A0008BE3C /* PCFParameters.m */,
				F114D2B1190AA87A0008BE3C /* PCFSDK.h */,
				F114D2B2190AA87A0008BE3C /* PCFSDK.m */,
				F114D2B3190AA87A0008BE3C /* Protocols */,
				F114D2B6190AA87A0008BE3C /* Utils */,
			);
			name = PCFSDK;
			path = ../PCFSDK;
			sourceTree = "<group>";
		};
		F114D2A6190AA87A0008BE3C /* Categories */ = {
			isa = PBXGroup;
			children = (
				F114D2A7190AA87A0008BE3C /* NSObject+PCFJsonizable.h */,
				F114D2A8190AA87A0008BE3C /* NSObject+PCFJsonizable.m */,
			);
			path = Categories;
			sourceTree = "<group>";
		};
		F114D2B3190AA87A0008BE3C /* Protocols */ = {
			isa = PBXGroup;
			children = (
				F114D314190AF1050008BE3C /* PCFMapping.h */,
				F114D2B5190AA87A0008BE3C /* PCFSortDescriptors.h */,
			);
			path = Protocols;
			sourceTree = "<group>";
		};
		F114D2B6190AA87A0008BE3C /* Utils */ = {
			isa = PBXGroup;
			children = (
				F1B601951923B29100B65371 /* PCFPushErrors.h */,
				F18761DF191C03CF0069B9B2 /* PCFNotifications.h */,
				F18761E0191C03CF0069B9B2 /* PCFNotifications.m */,
				F114D316190AF1110008BE3C /* PCFPersistentStorage.h */,
				F114D317190AF1110008BE3C /* PCFPersistentStorage.m */,
				F114D2B7190AA87A0008BE3C /* PCFJSONValueTransformer.h */,
				F114D2B8190AA87A0008BE3C /* PCFJSONValueTransformer.m */,
				F114D2B9190AA87A0008BE3C /* PCFPushDebug.h */,
				F114D2BA190AA87A0008BE3C /* PCFPushDebug.m */,
				F114D2BB190AA87A0008BE3C /* PCFPushErrorUtil.h */,
				F114D2BC190AA87A0008BE3C /* PCFPushErrorUtil.m */,
				F114D2BD190AA87A0008BE3C /* PCFHardwareUtil.h */,
				F114D2BE190AA87A0008BE3C /* PCFHardwareUtil.m */,
				F114D2BF190AA87A0008BE3C /* PCFPushHexUtil.h */,
				F114D2C0190AA87A0008BE3C /* PCFPushHexUtil.m */,
			);
			path = Utils;
			sourceTree = "<group>";
		};
		F114D2C1190AA87A0008BE3C /* PCFAnalytics */ = {
			isa = PBXGroup;
			children = (
				F114D323190AF24B0008BE3C /* PCFSDK+Analytics.h */,
				F114D324190AF24B0008BE3C /* PCFSDK+Analytics.m */,
				F114D31E190AF2440008BE3C /* Persistent Storage */,
				F114D2C2190AA87A0008BE3C /* App */,
				F114D2C5190AA87A0008BE3C /* BackEnd */,
				F114D2C8190AA87A0008BE3C /* Models */,
				F114D2CD190AA87A0008BE3C /* PCFAnalytics.h */,
				F114D2CE190AA87A0008BE3C /* PCFAnalytics.m */,
			);
			name = PCFAnalytics;
			path = ../PCFAnalytics;
			sourceTree = "<group>";
		};
		F114D2C2190AA87A0008BE3C /* App */ = {
			isa = PBXGroup;
			children = (
				F114D2C3190AA87A0008BE3C /* PCFPushAppDelegate+Analytics.h */,
				F114D2C4190AA87A0008BE3C /* PCFPushAppDelegate+Analytics.m */,
			);
			path = App;
			sourceTree = "<group>";
		};
		F114D2C5190AA87A0008BE3C /* BackEnd */ = {
			isa = PBXGroup;
			children = (
				F114D2C6190AA87A0008BE3C /* PCFAnalyticsURLConnection.h */,
				F114D2C7190AA87A0008BE3C /* PCFAnalyticsURLConnection.m */,
			);
			path = BackEnd;
			sourceTree = "<group>";
		};
		F114D2C8190AA87A0008BE3C /* Models */ = {
			isa = PBXGroup;
			children = (
				F114D2C9190AA87A0008BE3C /* PCFAnalyticEvent.h */,
				F114D2CA190AA87A0008BE3C /* PCFAnalyticEvent.m */,
				F114D2CB190AA87A0008BE3C /* PCFCoreDataManager.h */,
				F114D2CC190AA87A0008BE3C /* PCFCoreDataManager.m */,
			);
			path = Models;
			sourceTree = "<group>";
		};
		F114D31E190AF2440008BE3C /* Persistent Storage */ = {
			isa = PBXGroup;
			children = (
				F114D31F190AF2440008BE3C /* PCFPersistentStorage+Analytics.h */,
				F114D320190AF2440008BE3C /* PCFPersistentStorage+Analytics.m */,
			);
			path = "Persistent Storage";
			sourceTree = "<group>";
		};
		F114D327190E9FB60008BE3C /* BackEnd */ = {
			isa = PBXGroup;
			children = (
				F1899FB31911A21100327394 /* NSURLConnection+PCFBackEndConnection.h */,
				F1899FB41911A21100327394 /* NSURLConnection+PCFBackEndConnection.m */,
			);
			path = BackEnd;
			sourceTree = "<group>";
		};
		F114D330190EA7700008BE3C /* BackEnd */ = {
			isa = PBXGroup;
			children = (
				F114D331190EA7700008BE3C /* PCFPushURLConnection.h */,
				F114D332190EA7700008BE3C /* PCFPushURLConnection.m */,
			);
			path = BackEnd;
			sourceTree = "<group>";
		};
		F18D899018E5D6610084D142 /* PCFPush */ = {
			isa = PBXGroup;
			children = (
				F114D330190EA7700008BE3C /* BackEnd */,
				F114D2711908429E0008BE3C /* PCFPushClient.m */,
				F114D2721908429E0008BE3C /* PCFPushClient.h */,
				F18D899918E5D6610084D142 /* Models */,
				F18D89A618E5D6610084D142 /* PCFPushSDK.h */,
				F18D89A718E5D6610084D142 /* PCFPushSDK.m */,
				F18D89A818E5D6610084D142 /* Persistent Storage */,
			);
			name = PCFPush;
			path = ../PCFPush;
			sourceTree = "<group>";
		};
		F18D899918E5D6610084D142 /* Models */ = {
			isa = PBXGroup;
			children = (
				F18D89A018E5D6610084D142 /* PCFPushRegistrationData.h */,
				F18D89A118E5D6610084D142 /* PCFPushRegistrationData.m */,
				F18D89A218E5D6610084D142 /* PCFPushRegistrationRequestData.h */,
				F18D89A318E5D6610084D142 /* PCFPushRegistrationRequestData.m */,
				F18D89A418E5D6610084D142 /* PCFPushRegistrationResponseData.h */,
				F18D89A518E5D6610084D142 /* PCFPushRegistrationResponseData.m */,
			);
			path = Models;
			sourceTree = "<group>";
		};
		F18D89A818E5D6610084D142 /* Persistent Storage */ = {
			isa = PBXGroup;
			children = (
				F114D31A190AF13E0008BE3C /* PCFPersistentStorage+Push.h */,
				F114D31B190AF13E0008BE3C /* PCFPersistentStorage+Push.m */,
			);
			path = "Persistent Storage";
			sourceTree = "<group>";
		};
		F1B601991923B6EA00B65371 /* PCFFramework */ = {
			isa = PBXGroup;
			children = (
				F1B6019A1923B6EA00B65371 /* InfoPlist.strings */,
				F1B6019C1923B6EA00B65371 /* PCFCompleteSDK-Info.plist */,
				F1B6019D1923B6EA00B65371 /* PCFCompleteSDK-Prefix.pch */,
			);
			path = PCFFramework;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXHeadersBuildPhase section */
		D4E8A804185BAFDC00A841EE /* Headers */ = {
			isa = PBXHeadersBuildPhase;
			buildActionMask = 2147483647;
			files = (
				F114D325190AF24B0008BE3C /* PCFSDK+Analytics.h in Headers */,
				F18D89CA18E5D6610084D142 /* PCFPushSDK.h in Headers */,
				F114D2EF190AA87A0008BE3C /* PCFAnalytics.h in Headers */,
				F114D2D5190AA87A0008BE3C /* PCFClient.h in Headers */,
				F114D2D7190AA87A0008BE3C /* PCFParameters.h in Headers */,
				F114D2D9190AA87A0008BE3C /* PCFSDK.h in Headers */,
				F1899FB51911A21100327394 /* NSURLConnection+PCFBackEndConnection.h in Headers */,
				F114D2741908429E0008BE3C /* PCFPushClient.h in Headers */,
				F114D2DF190AA87A0008BE3C /* PCFPushDebug.h in Headers */,
				F114D2CF190AA87A0008BE3C /* NSObject+PCFJsonizable.h in Headers */,
				F114D2E9190AA87A0008BE3C /* PCFAnalyticsURLConnection.h in Headers */,
				F114D2DD190AA87A0008BE3C /* PCFJSONValueTransformer.h in Headers */,
				F114D315190AF1050008BE3C /* PCFMapping.h in Headers */,
				F114D2E1190AA87A0008BE3C /* PCFPushErrorUtil.h in Headers */,
				F18D89C618E5D6610084D142 /* PCFPushRegistrationRequestData.h in Headers */,
				F114D2E3190AA87A0008BE3C /* PCFHardwareUtil.h in Headers */,
				F114D2E5190AA87A0008BE3C /* PCFPushHexUtil.h in Headers */,
				F1B601A41923B6EA00B65371 /* PCFCompleteSDK-Prefix.pch in Headers */,
				F114D333190EA7700008BE3C /* PCFPushURLConnection.h in Headers */,
				F114D318190AF1110008BE3C /* PCFPersistentStorage.h in Headers */,
				F114D2EB190AA87A0008BE3C /* PCFAnalyticEvent.h in Headers */,
				F114D2D1190AA87A0008BE3C /* PCFAppDelegate.h in Headers */,
				F18D89C418E5D6610084D142 /* PCFPushRegistrationData.h in Headers */,
				F114D31C190AF13E0008BE3C /* PCFPersistentStorage+Push.h in Headers */,
				F114D2ED190AA87A0008BE3C /* PCFCoreDataManager.h in Headers */,
				F114D2DC190AA87A0008BE3C /* PCFSortDescriptors.h in Headers */,
				F18761E1191C03D00069B9B2 /* PCFNotifications.h in Headers */,
				F1B601961923B29100B65371 /* PCFPushErrors.h in Headers */,
				F114D321190AF2440008BE3C /* PCFPersistentStorage+Analytics.h in Headers */,
				F114D2D3190AA87A0008BE3C /* PCFAppDelegateProxy.h in Headers */,
				F114D2E7190AA87A0008BE3C /* PCFPushAppDelegate+Analytics.h in Headers */,
				F18D89C818E5D6610084D142 /* PCFPushRegistrationResponseData.h in Headers */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		F1B601161922A0A300B65371 /* Headers */ = {
			isa = PBXHeadersBuildPhase;
			buildActionMask = 2147483647;
			files = (
				F1B601171922A0A300B65371 /* PCFSDK+Analytics.h in Headers */,
				F1B601971923B29100B65371 /* PCFPushErrors.h in Headers */,
				F1B6011A1922A0A300B65371 /* PCFAnalytics.h in Headers */,
				F1B601A51923B6EA00B65371 /* PCFCompleteSDK-Prefix.pch in Headers */,
				F1B6011B1922A0A300B65371 /* PCFClient.h in Headers */,
				F1B6011C1922A0A300B65371 /* PCFParameters.h in Headers */,
				F1B6011D1922A0A300B65371 /* PCFSDK.h in Headers */,
				F1B6011E1922A0A300B65371 /* NSURLConnection+PCFBackEndConnection.h in Headers */,
				F1B6011F1922A0A300B65371 /* PCFPushClient.h in Headers */,
				F1B601201922A0A300B65371 /* PCFPushDebug.h in Headers */,
				F1B601211922A0A300B65371 /* NSObject+PCFJsonizable.h in Headers */,
				F1B601221922A0A300B65371 /* PCFAnalyticsURLConnection.h in Headers */,
				F1B601231922A0A300B65371 /* PCFJSONValueTransformer.h in Headers */,
				F1B601241922A0A300B65371 /* PCFMapping.h in Headers */,
				F1B601251922A0A300B65371 /* PCFPushErrorUtil.h in Headers */,
				F1B601281922A0A300B65371 /* PCFPushHexUtil.h in Headers */,
				F1B6012B1922A0A300B65371 /* PCFPersistentStorage.h in Headers */,
				F1B6012C1922A0A300B65371 /* PCFAnalyticEvent.h in Headers */,
				F1B6012D1922A0A300B65371 /* PCFAppDelegate.h in Headers */,
				F1B6012F1922A0A300B65371 /* PCFPersistentStorage+Push.h in Headers */,
				F1B601301922A0A300B65371 /* PCFCoreDataManager.h in Headers */,
				F1B601311922A0A300B65371 /* PCFSortDescriptors.h in Headers */,
				F1B601321922A0A300B65371 /* PCFNotifications.h in Headers */,
				F1B601331922A0A300B65371 /* PCFPersistentStorage+Analytics.h in Headers */,
				F1B601341922A0A300B65371 /* PCFAppDelegateProxy.h in Headers */,
				F1B601351922A0A300B65371 /* PCFPushAppDelegate+Analytics.h in Headers */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		F1B6015E1922A12500B65371 /* Headers */ = {
			isa = PBXHeadersBuildPhase;
			buildActionMask = 2147483647;
			files = (
				F1B601601922A12500B65371 /* PCFPushSDK.h in Headers */,
				F1B601631922A12500B65371 /* PCFClient.h in Headers */,
				F1B601641922A12500B65371 /* PCFParameters.h in Headers */,
				F1B601651922A12500B65371 /* PCFSDK.h in Headers */,
				F1B601661922A12500B65371 /* NSURLConnection+PCFBackEndConnection.h in Headers */,
				F1B601671922A12500B65371 /* PCFPushClient.h in Headers */,
				F1B601681922A12500B65371 /* PCFPushDebug.h in Headers */,
				F1B601691922A12500B65371 /* NSObject+PCFJsonizable.h in Headers */,
				F1B6016B1922A12500B65371 /* PCFJSONValueTransformer.h in Headers */,
				F1B6016C1922A12500B65371 /* PCFMapping.h in Headers */,
				F1B6016D1922A12500B65371 /* PCFPushErrorUtil.h in Headers */,
				F1B6016E1922A12500B65371 /* PCFPushRegistrationRequestData.h in Headers */,
				F1B6016F1922A12500B65371 /* PCFHardwareUtil.h in Headers */,
				F1B601701922A12500B65371 /* PCFPushHexUtil.h in Headers */,
				F1B601711922A12500B65371 /* PCFPushURLConnection.h in Headers */,
				F1B601A61923B6EA00B65371 /* PCFCompleteSDK-Prefix.pch in Headers */,
				F1B601731922A12500B65371 /* PCFPersistentStorage.h in Headers */,
				F1B601751922A12500B65371 /* PCFAppDelegate.h in Headers */,
				F1B601761922A12500B65371 /* PCFPushRegistrationData.h in Headers */,
				F1B601771922A12500B65371 /* PCFPersistentStorage+Push.h in Headers */,
				F1B601791922A12500B65371 /* PCFSortDescriptors.h in Headers */,
				F1B601981923B29100B65371 /* PCFPushErrors.h in Headers */,
				F1B6017A1922A12500B65371 /* PCFNotifications.h in Headers */,
				F1B6017C1922A12500B65371 /* PCFAppDelegateProxy.h in Headers */,
				F1B6017E1922A12500B65371 /* PCFPushRegistrationResponseData.h in Headers */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXHeadersBuildPhase section */

/* Begin PBXNativeTarget section */
		D4E8A807185BAFDC00A841EE /* PCFCompleteSDK */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = D4E8A819185BAFDC00A841EE /* Build configuration list for PBXNativeTarget "PCFCompleteSDK" */;
			buildPhases = (
				D4E8A802185BAFDC00A841EE /* Sources */,
				D4E8A803185BAFDC00A841EE /* Frameworks */,
				D4E8A804185BAFDC00A841EE /* Headers */,
				D4E8A805185BAFDC00A841EE /* Resources */,
				D4E8A806185BAFDC00A841EE /* ShellScript */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = PCFCompleteSDK;
			productName = OmniaPushSDK;
			productReference = D4E8A808185BAFDC00A841EE /* PCFCompleteSDK.framework */;
			productType = "com.apple.product-type.framework.static";
		};
		F1B600F71922A0A300B65371 /* PCFAnalyticsSDK */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = F1B601391922A0A300B65371 /* Build configuration list for PBXNativeTarget "PCFAnalyticsSDK" */;
			buildPhases = (
				F1B600F81922A0A300B65371 /* Sources */,
				F1B601151922A0A300B65371 /* Frameworks */,
				F1B601161922A0A300B65371 /* Headers */,
				F1B601371922A0A300B65371 /* Resources */,
				F1B601381922A0A300B65371 /* ShellScript */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = PCFAnalyticsSDK;
			productName = OmniaPushSDK;
			productReference = F1B6013D1922A0A300B65371 /* PCFAnalyticsSDK.framework */;
			productType = "com.apple.product-type.framework.static";
		};
		F1B6013F1922A12500B65371 /* PCFPushSDK */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = F1B601811922A12500B65371 /* Build configuration list for PBXNativeTarget "PCFPushSDK" */;
			buildPhases = (
				F1B601401922A12500B65371 /* Sources */,
				F1B6015D1922A12500B65371 /* Frameworks */,
				F1B6015E1922A12500B65371 /* Headers */,
				F1B6017F1922A12500B65371 /* Resources */,
				F1B601801922A12500B65371 /* ShellScript */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = PCFPushSDK;
			productName = OmniaPushSDK;
			productReference = F1B601851922A12500B65371 /* PCFPushSDK.framework */;
			productType = "com.apple.product-type.framework.static";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		D4E8A7FE185BAFDC00A841EE /* Project object */ = {
			isa = PBXProject;
			attributes = {
				LastUpgradeCheck = 0510;
				ORGANIZATIONNAME = Pivotal;
			};
			buildConfigurationList = D4E8A801185BAFDC00A841EE /* Build configuration list for PBXProject "PCFPushSDK" */;
			compatibilityVersion = "Xcode 3.2";
			developmentRegion = English;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = D4E8A7FD185BAFDC00A841EE;
			productRefGroup = D4E8A809185BAFDC00A841EE /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				D4E8A807185BAFDC00A841EE /* PCFCompleteSDK */,
				F1B600F71922A0A300B65371 /* PCFAnalyticsSDK */,
				F1B6013F1922A12500B65371 /* PCFPushSDK */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		D4E8A805185BAFDC00A841EE /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				F1B601A11923B6EA00B65371 /* PCFCompleteSDK-Info.plist in Resources */,
				F1B6019E1923B6EA00B65371 /* InfoPlist.strings in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		F1B601371922A0A300B65371 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				F1B601A21923B6EA00B65371 /* PCFCompleteSDK-Info.plist in Resources */,
				F1B6019F1923B6EA00B65371 /* InfoPlist.strings in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		F1B6017F1922A12500B65371 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				F1B601A31923B6EA00B65371 /* PCFCompleteSDK-Info.plist in Resources */,
				F1B601A01923B6EA00B65371 /* InfoPlist.strings in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXShellScriptBuildPhase section */
		D4E8A806185BAFDC00A841EE /* ShellScript */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /usr/bin/python;
			shellScript = "# TAG: BUILD SCRIPT (do not remove this comment)\n# Build script generated using https://github.com/kstenerud/iOS-Universal-Framework Mk 8 (beta 2012-06-16)\nimport logging\n\n\n##############################################################################\n#\n# Configuration\n#\n##############################################################################\n\n# Select which kind of framework to build.\n#\n# Note: Due to issues with Xcode's build process, if you select\n#       'embeddedframework', it will still show the regular framework\n#       (as a symlink) along side of the embedded framework. Be sure to\n#       instructfile://localhost/Users/rob/xl/omnia-pushsdk-ios/OmniaPushSDK/src/Public%20Headers/OmniaPushRegistrationListener.h your users to copy/move the embedded framework in this case!\n#\n# If your framework contains resources such as images, nibs, momds, plists,\n# zipfiles and such, choose 'embeddedframework'.\n#\n# If your framework contains no resources, choose 'framework'.\n#\nconfig_framework_type = 'framework'\n#config_framework_type = 'embeddedframework'\n\n# Open the build directory in Finder when the universal framework is\n# successfully built.\n#\n# This value can be overridden by setting the UFW_OPEN_BUILD_DIR env variable\n# to True or False.\n#\n# Recommended setting: True\n#\nconfig_open_build_dir = True\n\n# If true, ensures that all public headers are stored in the framework under\n# the same directory hierarchy as they were in the source tree.\n#\n# Xcode by default places all headers at the same top level, but every other\n# build tool in the known universe preserves directory structure. For simple\n# libraries it doesn't really matter much, but for ports of existing software\n# packages or for bigger libraries, it makes sense to have more structure.\n#\n# The default is set to \"False\" since that's what most Xcode users are used to.\n#\n# Recommended setting: True for deep hierarchy projects, False otherwise.\n#\nconfig_deep_header_hierarchy = False\n\n# Specify where the top of the public header hierarchy is. This path is\n# relative to the project's dir (PROJECT_DIR). You can reference environment\n# variables using templating syntax (e.g. \"${TARGET_NAME}/Some/Subdir\")\n#\n# NOTE: Only used if config_deep_header_hierarchy is True.\n#\n# If this is set to None, the script will attempt to figure out for itself\n# where the top of the header hierarchy is by looking for common path prefixes\n# in the public header files. This process can fail if:\n# - You only have one public header file.\n# - Your source header files don't all have a common root.\n#\n# A common approach is to use \"${TARGET_NAME}\", working under the assumption\n# that all of your header files share the common root of a directory under\n# your project with the same name as your target (which is the Xcode default).\n#\n# Recommended setting: \"${TARGET_NAME}\"\n#\nconfig_deep_header_top = \"${TARGET_NAME}\"\n\n# Warn when \"DerivedData\" is detected in any of the header, library, or\n# framework search paths. In almost all cases, references to directories under\n# DerivedData are added as a result of an Xcode bug and must be manually\n# removed.\n#\n# Recommended setting: True\n#\nconfig_warn_derived_data = True\n\n# Warn if no headers were marked public in this framework.\n#\n# Recommended setting: True\n#\nconfig_warn_no_public_headers = True\n\n# Cause the build to fail if any warnings are issued.\n#\n# Recommended setting: True\n#\nconfig_fail_on_warnings = True\n\n# Minimum log level\n#\n# Recommended setting: logging.INFO\n#\nconfig_log_level = logging.INFO\n\n\n##############################################################################\n#\n# Don't touch anything below here unless you know what you're doing.\n#\n##############################################################################\n\nimport collections\nimport json\nimport os\nimport re\nimport shlex\nimport shutil\nimport string\nimport subprocess\nimport sys\nimport time\nimport traceback\n\n\n##############################################################################\n#\n# Globals\n#\n##############################################################################\n\nlog = logging.getLogger('UFW')\n\nissued_warnings = False\n\n\n##############################################################################\n#\n# Classes\n#\n##############################################################################\n\n# Allows the slave build to communicate with the master build.\n#\nclass BuildState:\n\n    def __init__(self):\n        self.reload()\n\n    def reset(self):\n        self.slave_platform = None\n        self.slave_architectures = []\n        self.slave_linked_archive_paths = []\n        self.slave_built_fw_path = None\n        self.slave_built_embedded_fw_path = None\n\n    def set_slave_properties(self, architectures,\n                             linked_archive_paths,\n                             built_fw_path,\n                             built_embedded_fw_path):\n        self.slave_platform = os.environ['PLATFORM_NAME']\n        self.slave_architectures = architectures\n        self.slave_linked_archive_paths = linked_archive_paths\n        self.slave_built_fw_path = built_fw_path\n        self.slave_built_embedded_fw_path = built_embedded_fw_path\n\n    def get_save_path(self):\n        return os.path.join(os.environ['PROJECT_TEMP_DIR'], \"ufw_build_state.json\")\n\n    def persist(self):\n        filename = self.get_save_path()\n        parent = os.path.dirname(filename)\n        if not os.path.isdir(parent):\n            os.makedirs(parent)\n        with open(filename, \"w\") as f:\n            f.write(json.dumps(self.__dict__))\n\n    def reload(self):\n        self.reset()\n        filename = self.get_save_path()\n        if os.path.exists(filename):\n            with open(filename, \"r\") as f:\n                new_dict = json.loads(f.read())\n                if new_dict is not None:\n                    self.__dict__ = dict(self.__dict__.items() + new_dict.items())\n\n\n# Holds information about the current project and build environment.\n#\nclass Project:\n\n    def __init__(self, filename):\n        sourcecode_types = ['sourcecode.c.c',\n                            'sourcecode.c.objc',\n                            'sourcecode.cpp.cpp',\n                            'sourcecode.cpp.objcpp',\n                            'sourcecode.asm.asm',\n                            'sourcecode.asm.llvm',\n                            'sourcecode.nasm']\n\n        self.build_state = BuildState()\n        self.project_data = self.load_from_file(filename)\n        self.target = filter(lambda x: x['name'] == os.environ['TARGET_NAME'], self.project_data['targets'])[0]\n        self.public_headers = self.get_build_phase_files('PBXHeadersBuildPhase', lambda x: x.get('settings', False) and x['settings'].get('ATTRIBUTES', False) and 'Public' in x['settings']['ATTRIBUTES'])\n        self.static_libraries = self.get_build_phase_files('PBXFrameworksBuildPhase', lambda x: x['fileRef']['fileType'] == 'archive.ar' and x['fileRef']['sourceTree'] not in ['DEVELOPER_DIR', 'SDKROOT'])\n        self.static_frameworks = self.get_build_phase_files('PBXFrameworksBuildPhase', lambda x: x['fileRef']['fileType'] == 'wrapper.framework' and x['fileRef']['sourceTree'] not in ['DEVELOPER_DIR', 'SDKROOT'])\n        self.compilable_sources = self.get_build_phase_files('PBXSourcesBuildPhase', lambda x: x['fileRef']['fileType'] in sourcecode_types)\n        self.header_paths = [os.path.join(*x['pathComponents']) for x in self.public_headers]\n\n        self.headers_dir = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['CONTENTS_FOLDER_PATH'], 'Headers')\n        self.libtool_path = os.path.join(os.environ['DT_TOOLCHAIN_DIR'], 'usr', 'bin', 'libtool')\n        self.project_filename = os.path.join(os.environ['PROJECT_FILE_PATH'], \"project.pbxproj\")\n        self.local_exe_path = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['EXECUTABLE_PATH'])\n        self.local_architectures = os.environ['ARCHS'].split(' ')\n        self.local_built_fw_path = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['WRAPPER_NAME'])\n        self.local_built_embedded_fw_path = os.path.splitext(self.local_built_fw_path)[0] + \".embeddedframework\"\n        self.local_linked_archive_paths = [self.get_linked_ufw_archive_path(arch) for arch in self.local_architectures]\n        self.local_platform = os.environ['PLATFORM_NAME']\n        other_platforms = os.environ['SUPPORTED_PLATFORMS'].split(' ')\n        other_platforms.remove(self.local_platform)\n        self.other_platform = other_platforms[0]\n\n        sdk_name = os.environ['SDK_NAME']\n        if not sdk_name.startswith(self.local_platform):\n            raise Exception(\"%s didn't start with %s\" % (sdk_name, self.local_platform))\n        self.sdk_version = sdk_name[len(self.local_platform):]\n\n    # Load an Xcode project file.\n    #\n    def load_from_file(self, filename):\n        project_file = json.loads(subprocess.check_output([\"plutil\", \"-convert\", \"json\", \"-o\", \"-\", filename]))\n        all_objects = project_file['objects']\n        del project_file['objects']\n        for obj in all_objects.values():\n            self.fix_keys(obj)\n        self.unpack_objects(self.build_dereference_list(all_objects, None, None, project_file))\n        self.unpack_objects(self.build_dereference_list(all_objects, None, None, all_objects.values()))\n        project_data = project_file['rootObject']\n        self.build_full_paths(project_data, splitpath(os.environ['SOURCE_ROOT']))\n        return project_data\n\n    def is_key(self, obj):        \n        return isinstance(obj, basestring) and len(obj) == 24 and re.search('^[0-9a-fA-F]+$', obj) is not None\n    \n    def build_dereference_list(self, all_objects, parent, key, obj):\n        deref_list = []\n        if self.is_key(obj):\n            dereferenced = all_objects.get(obj, obj)\n            if dereferenced is not obj:\n                deref_list.append((parent, key, obj, dereferenced))\n        elif isinstance(obj, collections.Mapping):\n            for k, v in obj.iteritems():\n                deref_list += self.build_dereference_list(all_objects, obj, k, v)\n        elif isinstance(obj, collections.Iterable) and not isinstance(obj, basestring):\n            for item in obj:\n                deref_list += self.build_dereference_list(all_objects, obj, None, item)\n        return deref_list\n    \n    def unpack_objects(self, deref_list):\n        for parent, key, orig, obj in deref_list:\n            if key is None:\n                parent.remove(orig)\n                parent.append(obj)\n            else:\n                parent[key] = obj\n\n    # Store the full path, separated into components, to a node inside the node\n    # as \"pathComponents\". Also recurse into that node if it's a group.\n    #\n    def build_full_paths(self, node, base_path):\n        # Some nodes are relative to a different source tree, specified as an\n        # env variable.\n        if node.get('sourceTree', '<group>') != '<group>':\n            new_base_path = os.environ.get(node['sourceTree'], None)\n            if new_base_path:\n                base_path = splitpath(new_base_path)\n        # Add the current node's path, if any.\n        if node.get('path', False):\n            base_path = base_path + splitpath(node['path'])\n        node['pathComponents'] = base_path\n        # Recurse if this is a group.\n        if node['isa'] == 'PBXGroup':\n            for child in node['children']:\n                self.build_full_paths(child, base_path)\n        elif node['isa'] == 'PBXProject':\n            self.build_full_paths(node['mainGroup'], base_path)\n            self.build_full_paths(node['productRefGroup'], base_path)\n            for child in node['targets']:\n                self.build_full_paths(child, base_path)\n            projectRefs = node.get('projectReferences', None)\n            if projectRefs is not None:\n                for child in projectRefs[0].values():\n                    self.build_full_paths(child, base_path)\n\n    # Fix up any inconvenient keys.\n    #\n    def fix_keys(self, obj):\n        key_remappings = {'lastKnownFileType': 'fileType', 'explicitFileType': 'fileType'}\n        for key in list(set(key_remappings.keys()) & set(obj.keys())):\n            obj[key_remappings[key]] = obj[key]\n            del obj[key]\n\n    # Get the files from a build phase.\n    #\n    def get_build_phase_files(self, build_phase_name, filter_func):\n        build_phase = filter(lambda x: x['isa'] == build_phase_name, self.target['buildPhases'])[0]\n        build_files = filter(filter_func, build_phase['files'])\n        return [x['fileRef'] for x in build_files]\n\n    # Get the truncated paths of all headers that start with the specified\n    # relative path. Paths are read and returned as fully separated lists.\n    # e.g. ['Some', 'Path', 'To', 'A', 'Header'] with relative_path of\n    # ['Some', 'Path'] gets truncated to ['To', 'A', 'Header']\n    #\n    def movable_headers_relative_to(self, relative_path):\n        rel_path_length = len(relative_path)\n        result = filter(lambda path: len(path) >= rel_path_length and\n                                     path[:rel_path_length] == relative_path, self.header_paths)\n        return [path[rel_path_length:] for path in result]\n\n    # Get the full path to where a linkable archive (library or framework)\n    # is supposed to be.\n    #\n    def get_linked_archive_path(self, architecture):\n        return os.path.join(os.environ['OBJECT_FILE_DIR_%s' % os.environ['CURRENT_VARIANT']],\n                            architecture,\n                            os.environ['EXECUTABLE_NAME'])\n\n    # Get the full path to our custom linked archive of the project.\n    #\n    def get_linked_ufw_archive_path(self, architecture):\n        return self.get_linked_archive_path(architecture) + \".ufwbuild\"\n\n    # Get the full path to the executable of an archive.\n    #\n    def get_exe_path(self, node):\n        path = os.path.join(*node['pathComponents'])\n        if node['fileType'] == 'wrapper.framework':\n            # Frameworks are directories, so go one deeper\n            path = os.path.join(path, os.path.splitext(node['pathComponents'][-1])[0])\n        return path\n\n    # Get the path to the directory containing the archive.\n    #\n    def get_containing_path(self, node):\n        return os.path.join(*node['pathComponents'])\n    \n    def get_archive_search_paths(self):\n        log.info(\"Search paths = %s\" % set([self.get_containing_path(fw) for fw in self.static_frameworks] + [self.get_containing_path(fw) for fw in self.static_libraries]))\n        return set([self.get_containing_path(fw) for fw in self.static_frameworks] + [self.get_containing_path(fw) for fw in self.static_libraries])\n\n    # Command to link all objects of a single architecture.\n    #\n    def get_single_arch_link_command(self, architecture):\n        cmd = [self.libtool_path,\n               \"-static\",\n               \"-arch_only\", architecture,\n               \"-syslibroot\", os.environ['SDKROOT'],\n               \"-L%s\" % os.environ['TARGET_BUILD_DIR'],\n               \"-filelist\", os.environ['LINK_FILE_LIST_%s_%s' % (os.environ['CURRENT_VARIANT'], architecture)]]\n        if os.environ.get('OTHER_LDFLAGS', False):\n            cmd += [os.environ['OTHER_LDFLAGS']]\n        if os.environ.get('WARNING_LDFLAGS', False):\n            cmd += [os.environ['WARNING_LDFLAGS']]\n#        cmd += [\"-L%s\" % libpath for libpath in self.get_archive_search_paths()]\n        cmd += [self.get_exe_path(fw) for fw in self.static_frameworks]\n        cmd += [self.get_exe_path(lib) for lib in self.static_libraries]\n        cmd += [\"-o\", self.get_linked_ufw_archive_path(architecture)]\n        return cmd\n\n    # Command to link all local architectures for the current configuration\n    # into an archive. This reads all libraries + the UFW-built archives and\n    # overwrites the final product.\n    #\n    def get_local_archs_link_command(self):\n        cmd = [self.libtool_path,\n               \"-static\"]\n        cmd += self.local_linked_archive_paths\n        cmd += [self.get_exe_path(fw) for fw in self.static_frameworks]\n        cmd += [self.get_exe_path(lib) for lib in self.static_libraries]\n        cmd += [\"-o\", os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['EXECUTABLE_PATH'])]\n        return cmd\n\n    # Command to link all architectures into a universal archive.\n    # This reads all UFW-built archives and overwrites the final product.\n    #\n    def get_all_archs_link_command(self):\n        cmd = [self.libtool_path,\n               \"-static\"]\n        cmd += self.local_linked_archive_paths + self.build_state.slave_linked_archive_paths\n        cmd += [\"-o\", os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['EXECUTABLE_PATH'])]\n        return cmd\n\n    # Build up an environment for the slave process. This uses BUILD_ROOT\n    # and TEMP_ROOT to convert all environment variables to values suitable\n    # for the slave build environment so that xcodebuild doesn't try to build\n    # in the project directory under \"build\".\n    #\n    def get_slave_environment(self):\n        ignored = ['LD_MAP_FILE_PATH',\n        'HEADER_SEARCH_PATHS',\n        'LIBRARY_SEARCH_PATHS',\n        'FRAMEWORK_SEARCH_PATHS']\n        build_root = os.environ['BUILD_ROOT']\n        temp_root = os.environ['TEMP_ROOT']\n        newenv = {}\n        for key, value in os.environ.items():\n            if key not in ignored and not key.startswith('LINK_FILE_LIST_') and not key.startswith('LD_DEPENDENCY_'):\n                if build_root in value or temp_root in value:\n                    newenv[key] = value.replace(self.local_platform, self.other_platform)\n        return newenv\n\n    # Command to invoke xcodebuild on the slave platform.\n    #\n    def get_slave_project_build_command(self):\n        cmd = [\"xcodebuild\",\n               \"-project\",\n               os.environ['PROJECT_FILE_PATH'],\n               \"-target\",\n               os.environ['TARGET_NAME'],\n               \"-configuration\",\n               os.environ['CONFIGURATION'],\n               \"-sdk\",\n               self.other_platform + self.sdk_version]\n        cmd += [\"%s=%s\" % (key, value) for key, value in self.get_slave_environment().items()]\n        cmd += [\"UFW_MASTER_PLATFORM=\" + os.environ['PLATFORM_NAME']]\n        cmd += [os.environ['ACTION']]\n        return cmd\n\n\n\n##############################################################################\n#\n# Utility Functions\n#\n##############################################################################\n\n# Split a path into a list of path components.\n#\ndef splitpath(path, maxdepth=20):\n     (head, tail) = os.path.split(path)\n     return splitpath(head, maxdepth - 1) + [tail] if maxdepth and head and head != path else [ head or tail ]\n\n# Remove all subdirectories under a path.\n#\ndef remove_subdirs(path, ignore_files):\n    if os.path.exists(path):\n        for filename in filter(lambda x: x not in ignore_files, os.listdir(path)):\n            fullpath = os.path.join(path, filename)\n            if os.path.isdir(fullpath):\n                log.info(\"Remove %s\" % fullpath)\n                shutil.rmtree(fullpath)\n\n# Make whatever parent paths are necessary for a path to exist.\n#\ndef ensure_path_exists(path):\n    if not os.path.isdir(path):\n        os.makedirs(path)\n\n# Make whatever parent paths are necessary for a path's parent to exist.\n#\ndef ensure_parent_exists(path):\n    parent = os.path.dirname(path)\n    if not os.path.isdir(parent):\n        os.makedirs(parent)\n\n# Remove a file or dir if it exists.\n#\ndef remove_path(path):\n    if os.path.exists(path):\n        if os.path.isdir(path) and not os.path.islink(path):\n            shutil.rmtree(path)\n        else:\n            os.remove(path)\n\n# Move a file or dir, replacing the destination if it exists.\n#\ndef move_file(src, dst):\n    if src == dst or not os.path.isfile(src):\n        return\n    log.info(\"Move %s to %s\" % (src, dst))\n    ensure_parent_exists(dst)\n    remove_path(dst)\n    shutil.move(src, dst)\n\n# Copy a file or dir, replacing the destination if it exists already.\n#\ndef copy_overwrite(src, dst):\n    if src != dst:\n        remove_path(dst)\n        ensure_parent_exists(dst)\n        shutil.copytree(src, dst, symlinks=True)\n\n# Attempt to symlink link_path -> link_to.\n# link_to must be a path relative to link_path's parent and must exist.\n# If link_path already exists, do nothing.\n#\ndef attempt_symlink(link_path, link_to):\n    # Only allow linking to an existing file\n    os.stat(os.path.abspath(os.path.join(link_path, \"..\", link_to)))\n\n    # Only make the link if it hasn't already been made\n    if not os.path.exists(link_path):\n        log.info(\"Symlink %s -> %s\" % (link_path, link_to))\n        os.symlink(link_to, link_path)\n\n# Takes the last entry in an array-based path and returns a normal path\n# relative to base_path.\n#\ndef top_level_file_path(base_path, path_list):\n    return os.path.join(base_path, os.path.split(path_list[-1])[-1])\n\n# Takes all entries in an array-based path and returns a normal path\n# relative to base_path.\n#\ndef full_file_path(base_path, path_list):\n    return os.path.join(*([base_path] + path_list))\n\n# Print a command before executing it.\n# Also print out all output from the command to STDOUT.\n#\ndef print_and_call(cmd):\n    log.info(\"Cmd \" + \" \".join(cmd))\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    result = p.communicate()[0]\n    if len(result) > 0:\n        log.info(result)\n    if p.returncode != 0:\n        raise subprocess.CalledProcessError(p.returncode, cmd)\n\n# Special print-and-call command for the slave build that strips out\n# xcodebuild's spammy list of environment variables.\n#\ndef print_and_call_slave_build(cmd, other_platform):\n    separator = '=== BUILD NATIVE TARGET '\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    result = p.communicate()[0].split(separator)\n    if len(result) == 1:\n        result = result[0]\n    else:\n        result = separator + result[1]\n    log.info(\"Cmd \" + \" \".join(cmd) + \"\\n\" + result)\n    if p.returncode != 0:\n        raise subprocess.CalledProcessError(p.returncode, cmd)\n\n# Issue a warning and record that a warning has been issued.\n#\ndef issue_warning(msg, *args, **kwargs):\n    global issued_warnings\n    issued_warnings = True\n    log.warn(msg, *args, **kwargs)\n\n\n\n##############################################################################\n#\n# Main Application\n#\n##############################################################################\n\n# Check if we are running as master.\n#\ndef is_master():\n    return os.environ.get('UFW_MASTER_PLATFORM', os.environ['PLATFORM_NAME']) == os.environ['PLATFORM_NAME']\n\n# DerivedData should almost never appear in any framework, library, or header\n# search paths. However, Xcode will sometimes add them in, so we check to make\n# sure.\n#\ndef check_for_derived_data_in_search_paths(project):\n    search_path_keys = [\"FRAMEWORK_SEARCH_PATHS\", \"LIBRARY_SEARCH_PATHS\", \"HEADER_SEARCH_PATHS\"]\n    build_configs = project.target['buildConfigurationList']['buildConfigurations']\n    build_settings = filter(lambda x: x['name'] == os.environ['CONFIGURATION'], build_configs)[0]['buildSettings']\n    \n    found_something = False\n    for path_key in filter(lambda x: x in build_settings, search_path_keys):\n        path = build_settings[path_key]\n        if \"DerivedData\" in path:\n            found_something = True\n            log.warn(\"Derived data in %s\" % path)\n            issue_warning(\"'%s' contains reference to 'DerivedData'.\" % path_key)\n    if found_something:\n        log.warn(\"Check your build settings and remove any entries that contain paths inside the DerivedData folder.\")\n        log.warn(\"Otherwise you can disable this warning by changing 'config_warn_derived_data' in this script.\")\n\n# Link local architectures into their respective archives.\n#\ndef link_local_archs(project):\n    for arch in project.local_architectures:\n        print_and_call(project.get_single_arch_link_command(arch))\n\n# Link only the local architectures into the final product, not the slave\n# architectures. For iphoneos, this will be armv6, armv7. For simulator, this\n# will be i386.\n#\ndef link_combine_local_archs(project):\n    print_and_call(project.get_local_archs_link_command())\n\n# Link all architectures into the final product.\n#\ndef link_combine_all_archs(project):\n    print_and_call(project.get_all_archs_link_command())\n\n# Check if we should open the build directory after a successful build.\n#\ndef should_open_build_dir():\n    env_setting = os.environ.get('UFW_OPEN_BUILD_DIR', None)\n    if env_setting is not None:\n        return env_setting\n\n    return config_open_build_dir\n\n# Open the build dir in Finder.\n#\ndef open_build_dir():\n    print_and_call(['open', os.environ['TARGET_BUILD_DIR']])\n\n# Check if the build was started by selecting \"Archive\" under \"Product\" in\n# Xcode.\n#\ndef is_archive_build():\n    # ACTION is always 'build', but perhaps Apple will fix this someday?\n    archive_build = os.environ['ACTION'] == 'archive'\n\n    if not archive_build:\n        # This can be passed in as an env variable when building from command line.\n        archive_build = os.environ.get('UFW_ACTION', None) == 'archive'\n\n    build_dir = splitpath(os.environ['BUILD_DIR'])\n    if not archive_build:\n        # This partial path is used when you select \"archive\" from within Xcode.\n        archive_build = 'ArchiveIntermediates' in build_dir\n\n    # It only counts as a full archive build if this target is being built into\n    # its own build dir (not being built as a dependency of another target)\n    if archive_build:\n        archive_build = os.environ['TARGET_NAME'] in build_dir\n    \n    return archive_build\n\n# Xcode by default throws all public headers into the top level directory.\n# This function moves them to their expected deep hierarchy.\n#\ndef build_deep_header_hierarchy(project):\n    header_path_top = config_deep_header_top\n    if not header_path_top:\n        header_path_top = os.path.commonprefix(project.header_paths)\n    else:\n        header_path_top = splitpath(header_path_top)\n\n    built_headers_path = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['PUBLIC_HEADERS_FOLDER_PATH'])\n    movable_headers = project.movable_headers_relative_to(header_path_top)\n\n    # Remove subdirs if they only contain files that have been rebuilt\n    ignore_headers = filter(lambda x: not os.path.isfile(top_level_file_path(built_headers_path, x)), movable_headers)\n    remove_subdirs(built_headers_path, [file[0] for file in ignore_headers])\n\n    # Move rebuilt headers into their proper subdirs\n    for header in movable_headers:\n        move_file(top_level_file_path(built_headers_path, header), full_file_path(built_headers_path, header))\n\n# Add all symlinks needed to make a full framework structure:\n#\n# MyFramework.framework\n# |-- MyFramework -> Versions/Current/MyFramework\n# |-- Headers -> Versions/Current/Headers\n# |-- Resources -> Versions/Current/Resources\n# `-- Versions\n#     |-- A\n#     |   |-- MyFramework\n#     |   |-- Headers\n#     |   |   `-- MyFramework.h\n#     |   `-- Resources\n#     |       |-- Info.plist\n#     |       |-- MyViewController.nib\n#     |       `-- en.lproj\n#     |           `-- InfoPlist.strings\n#     `-- Current -> A\n#\ndef add_symlinks_to_framework(project):\n    base_dir = project.local_built_fw_path\n    attempt_symlink(os.path.join(base_dir, \"Versions\", \"Current\"), os.environ['FRAMEWORK_VERSION'])\n    if os.path.isdir(os.path.join(base_dir, \"Versions\", \"Current\", \"Headers\")):\n        attempt_symlink(os.path.join(base_dir, \"Headers\"), os.path.join(\"Versions\", \"Current\", \"Headers\"))\n    if os.path.isdir(os.path.join(base_dir, \"Versions\", \"Current\", \"Resources\")):\n        attempt_symlink(os.path.join(base_dir, \"Resources\"), os.path.join(\"Versions\", \"Current\", \"Resources\"))\n    attempt_symlink(os.path.join(base_dir, os.environ['EXECUTABLE_NAME']), os.path.join(\"Versions\", \"Current\", os.environ['EXECUTABLE_NAME']))\n\n# Build an embedded framework structure.\n# An embedded framework contains the actual framework, plus a \"Resources\"\n# directory containing symlinks to all resources found in the actual framework,\n# with the exception of \"Info.plist\" and anything ending in \".lproj\":\n#\n# MyFramework.embeddedframework\n# |-- MyFramework.framework\n# |   |-- MyFramework -> Versions/Current/MyFramework\n# |   |-- Headers -> Versions/Current/Headers\n# |   |-- Resources -> Versions/Current/Resources\n# |   `-- Versions\n# |       |-- A\n# |       |   |-- MyFramework\n# |       |   |-- Headers\n# |       |   |   `-- MyFramework.h\n# |       |   `-- Resources\n# |       |       |-- Info.plist\n# |       |       |-- MyViewController.nib\n# |       |       `-- en.lproj\n# |       |           `-- InfoPlist.strings\n# |       `-- Current -> A\n# `-- Resources\n#     `-- MyViewController.nib -> ../MyFramework.framework/Resources/MyViewController.nib\n#\ndef build_embedded_framework(project):\n    fw_path = project.local_built_fw_path\n    embedded_path = project.local_built_embedded_fw_path\n    fw_name = os.environ['WRAPPER_NAME']\n\n    if (os.path.islink(fw_path)):\n        # If the framework path is a link, the build result already in embeddedframework.\n        # Just recreate embeddedframework's Resources\n        remove_path(os.path.join(embedded_path, \"Resources\"))\n    else:\n        remove_path(embedded_path)\n        ensure_path_exists(embedded_path)\n        copy_overwrite(fw_path, os.path.join(embedded_path, fw_name))\n\n    # Create embeddedframework's Resources        \n    ensure_path_exists(os.path.join(embedded_path, \"Resources\"))\n    symlink_source = os.path.join(\"..\", fw_name, \"Resources\")\n    symlink_path = os.path.join(embedded_path, \"Resources\")\n    if os.path.isdir(os.path.join(fw_path, \"Resources\")):\n        for file in filter(lambda x: x != \"Info.plist\" and not x.endswith(\".lproj\"), os.listdir(os.path.join(fw_path, \"Resources\"))):\n            attempt_symlink(os.path.join(symlink_path, file), os.path.join(symlink_source, file))\n\n    # Remove the normal framework and replace it with a symlink to the copy\n    # in the embedded framework. This is needed because Xcode runs its strip\n    # phase AFTER the script runs.\n    embed_fw_wrapper = os.path.splitext(os.environ['WRAPPER_NAME'])[0] + \".embeddedframework\"\n    remove_path(fw_path)\n    attempt_symlink(fw_path, os.path.join(embed_fw_wrapper, os.environ['WRAPPER_NAME']))\n\n\n# Run the build process in slave mode to build the other configuration\n# (device/simulator).\n#\ndef run_slave_build(project):\n    print_and_call_slave_build(project.get_slave_project_build_command(), project.other_platform)\n\n# Run the build process.\n#\ndef run_build():\n    project = Project(os.path.join(os.environ['PROJECT_FILE_PATH'], \"project.pbxproj\"))\n\n    # Issue warnings only if we're master.\n    if is_master():\n        if len(project.compilable_sources) == 0:\n            raise Exception(\"No compilable sources found. Please add at least one source file to build target %s.\" % os.environ['TARGET_NAME'])\n\n        if config_warn_derived_data:\n            check_for_derived_data_in_search_paths(project)\n        if config_warn_no_public_headers and len(project.public_headers) == 0:\n            issue_warning('No headers in build target %s were marked public. Please move at least one header to \"Public\" in the \"Copy Headers\" build phase.' % os.environ['TARGET_NAME'])\n\n    # Only build slave if this is an archive build.\n    if is_archive_build():\n        if is_master():\n            log.debug(\"Building as MASTER\")\n            # The slave-side linker tries to include this (nonexistent) path as\n            # a library path.\n            ensure_path_exists(project.get_slave_environment()['BUILT_PRODUCTS_DIR'])\n            project.build_state.persist()\n            run_slave_build(project)\n            project.build_state.reload()\n        else:\n            log.debug(\"Building as SLAVE\")\n            project.build_state.reload()\n            project.build_state.set_slave_properties(project.local_architectures,\n                                                     project.local_linked_archive_paths,\n                                                     project.local_built_fw_path,\n                                                     project.local_built_embedded_fw_path)\n            project.build_state.persist()\n\n    link_local_archs(project)\n    \n    # Only do a universal binary when building an archive.\n    if is_archive_build() and is_master():\n        link_combine_all_archs(project)\n    else:\n        link_combine_local_archs(project)\n\n    if config_deep_header_hierarchy:\n        build_deep_header_hierarchy(project)\n\n    add_symlinks_to_framework(project)\n    \n    if is_master():\n        if config_framework_type == 'embeddedframework':\n            build_embedded_framework(project)\n        elif config_framework_type != 'framework':\n            raise Exception(\"%s: Unknown framework type for config_framework_type\" % config_framework_type)\n\n\nif __name__ == \"__main__\":\n    log_handler = logging.StreamHandler()\n    log_handler.setFormatter(logging.Formatter(\"%(name)s (\" + os.environ['PLATFORM_NAME'] + \"): %(levelname)s: %(message)s\"))\n    log.addHandler(log_handler)\n    log.setLevel(config_log_level)\n\n    error_code = 0\n    prefix = \"M\" if is_master() else \"S\"\n    log_handler.setFormatter(logging.Formatter(\"%(name)s (\" + prefix + \" \" + os.environ['PLATFORM_NAME'] + \"): %(levelname)s: %(message)s\"))\n\n    log.debug(\"Begin build process\")\n\n    if config_deep_header_top:\n        config_deep_header_top = string.Template(config_deep_header_top).substitute(os.environ)\n\n    try:\n        run_build()\n        if issued_warnings:\n            if config_fail_on_warnings:\n                error_code = 1\n            log.warn(\"Build completed with warnings\")\n        else:\n            log.info(\"Build completed\")\n        if not is_archive_build():\n            log.info(\"Note: This is *NOT* a universal framework build. To build as a universal framework, do an archive build.\")\n            log.info(\"To do an archive build from command line, use \\\"xcodebuild -configuration Release UFW_ACTION=archive clean build\\\"\")\n    except Exception:\n        traceback.print_exc(file=sys.stdout)\n        error_code = 1\n        log.error(\"Build failed\")\n    finally:\n        if error_code == 0 and is_archive_build() and is_master():\n            log.info(\"Built framework is in \" + os.environ['TARGET_BUILD_DIR'])\n            if should_open_build_dir():\n                open_build_dir()\n        sys.exit(error_code)\n";
		};
		F1B601381922A0A300B65371 /* ShellScript */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /usr/bin/python;
			shellScript = "# TAG: BUILD SCRIPT (do not remove this comment)\n# Build script generated using https://github.com/kstenerud/iOS-Universal-Framework Mk 8 (beta 2012-06-16)\nimport logging\n\n\n##############################################################################\n#\n# Configuration\n#\n##############################################################################\n\n# Select which kind of framework to build.\n#\n# Note: Due to issues with Xcode's build process, if you select\n#       'embeddedframework', it will still show the regular framework\n#       (as a symlink) along side of the embedded framework. Be sure to\n#       instructfile://localhost/Users/rob/xl/omnia-pushsdk-ios/OmniaPushSDK/src/Public%20Headers/OmniaPushRegistrationListener.h your users to copy/move the embedded framework in this case!\n#\n# If your framework contains resources such as images, nibs, momds, plists,\n# zipfiles and such, choose 'embeddedframework'.\n#\n# If your framework contains no resources, choose 'framework'.\n#\nconfig_framework_type = 'framework'\n#config_framework_type = 'embeddedframework'\n\n# Open the build directory in Finder when the universal framework is\n# successfully built.\n#\n# This value can be overridden by setting the UFW_OPEN_BUILD_DIR env variable\n# to True or False.\n#\n# Recommended setting: True\n#\nconfig_open_build_dir = True\n\n# If true, ensures that all public headers are stored in the framework under\n# the same directory hierarchy as they were in the source tree.\n#\n# Xcode by default places all headers at the same top level, but every other\n# build tool in the known universe preserves directory structure. For simple\n# libraries it doesn't really matter much, but for ports of existing software\n# packages or for bigger libraries, it makes sense to have more structure.\n#\n# The default is set to \"False\" since that's what most Xcode users are used to.\n#\n# Recommended setting: True for deep hierarchy projects, False otherwise.\n#\nconfig_deep_header_hierarchy = False\n\n# Specify where the top of the public header hierarchy is. This path is\n# relative to the project's dir (PROJECT_DIR). You can reference environment\n# variables using templating syntax (e.g. \"${TARGET_NAME}/Some/Subdir\")\n#\n# NOTE: Only used if config_deep_header_hierarchy is True.\n#\n# If this is set to None, the script will attempt to figure out for itself\n# where the top of the header hierarchy is by looking for common path prefixes\n# in the public header files. This process can fail if:\n# - You only have one public header file.\n# - Your source header files don't all have a common root.\n#\n# A common approach is to use \"${TARGET_NAME}\", working under the assumption\n# that all of your header files share the common root of a directory under\n# your project with the same name as your target (which is the Xcode default).\n#\n# Recommended setting: \"${TARGET_NAME}\"\n#\nconfig_deep_header_top = \"${TARGET_NAME}\"\n\n# Warn when \"DerivedData\" is detected in any of the header, library, or\n# framework search paths. In almost all cases, references to directories under\n# DerivedData are added as a result of an Xcode bug and must be manually\n# removed.\n#\n# Recommended setting: True\n#\nconfig_warn_derived_data = True\n\n# Warn if no headers were marked public in this framework.\n#\n# Recommended setting: True\n#\nconfig_warn_no_public_headers = True\n\n# Cause the build to fail if any warnings are issued.\n#\n# Recommended setting: True\n#\nconfig_fail_on_warnings = True\n\n# Minimum log level\n#\n# Recommended setting: logging.INFO\n#\nconfig_log_level = logging.INFO\n\n\n##############################################################################\n#\n# Don't touch anything below here unless you know what you're doing.\n#\n##############################################################################\n\nimport collections\nimport json\nimport os\nimport re\nimport shlex\nimport shutil\nimport string\nimport subprocess\nimport sys\nimport time\nimport traceback\n\n\n##############################################################################\n#\n# Globals\n#\n##############################################################################\n\nlog = logging.getLogger('UFW')\n\nissued_warnings = False\n\n\n##############################################################################\n#\n# Classes\n#\n##############################################################################\n\n# Allows the slave build to communicate with the master build.\n#\nclass BuildState:\n\n    def __init__(self):\n        self.reload()\n\n    def reset(self):\n        self.slave_platform = None\n        self.slave_architectures = []\n        self.slave_linked_archive_paths = []\n        self.slave_built_fw_path = None\n        self.slave_built_embedded_fw_path = None\n\n    def set_slave_properties(self, architectures,\n                             linked_archive_paths,\n                             built_fw_path,\n                             built_embedded_fw_path):\n        self.slave_platform = os.environ['PLATFORM_NAME']\n        self.slave_architectures = architectures\n        self.slave_linked_archive_paths = linked_archive_paths\n        self.slave_built_fw_path = built_fw_path\n        self.slave_built_embedded_fw_path = built_embedded_fw_path\n\n    def get_save_path(self):\n        return os.path.join(os.environ['PROJECT_TEMP_DIR'], \"ufw_build_state.json\")\n\n    def persist(self):\n        filename = self.get_save_path()\n        parent = os.path.dirname(filename)\n        if not os.path.isdir(parent):\n            os.makedirs(parent)\n        with open(filename, \"w\") as f:\n            f.write(json.dumps(self.__dict__))\n\n    def reload(self):\n        self.reset()\n        filename = self.get_save_path()\n        if os.path.exists(filename):\n            with open(filename, \"r\") as f:\n                new_dict = json.loads(f.read())\n                if new_dict is not None:\n                    self.__dict__ = dict(self.__dict__.items() + new_dict.items())\n\n\n# Holds information about the current project and build environment.\n#\nclass Project:\n\n    def __init__(self, filename):\n        sourcecode_types = ['sourcecode.c.c',\n                            'sourcecode.c.objc',\n                            'sourcecode.cpp.cpp',\n                            'sourcecode.cpp.objcpp',\n                            'sourcecode.asm.asm',\n                            'sourcecode.asm.llvm',\n                            'sourcecode.nasm']\n\n        self.build_state = BuildState()\n        self.project_data = self.load_from_file(filename)\n        self.target = filter(lambda x: x['name'] == os.environ['TARGET_NAME'], self.project_data['targets'])[0]\n        self.public_headers = self.get_build_phase_files('PBXHeadersBuildPhase', lambda x: x.get('settings', False) and x['settings'].get('ATTRIBUTES', False) and 'Public' in x['settings']['ATTRIBUTES'])\n        self.static_libraries = self.get_build_phase_files('PBXFrameworksBuildPhase', lambda x: x['fileRef']['fileType'] == 'archive.ar' and x['fileRef']['sourceTree'] not in ['DEVELOPER_DIR', 'SDKROOT'])\n        self.static_frameworks = self.get_build_phase_files('PBXFrameworksBuildPhase', lambda x: x['fileRef']['fileType'] == 'wrapper.framework' and x['fileRef']['sourceTree'] not in ['DEVELOPER_DIR', 'SDKROOT'])\n        self.compilable_sources = self.get_build_phase_files('PBXSourcesBuildPhase', lambda x: x['fileRef']['fileType'] in sourcecode_types)\n        self.header_paths = [os.path.join(*x['pathComponents']) for x in self.public_headers]\n\n        self.headers_dir = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['CONTENTS_FOLDER_PATH'], 'Headers')\n        self.libtool_path = os.path.join(os.environ['DT_TOOLCHAIN_DIR'], 'usr', 'bin', 'libtool')\n        self.project_filename = os.path.join(os.environ['PROJECT_FILE_PATH'], \"project.pbxproj\")\n        self.local_exe_path = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['EXECUTABLE_PATH'])\n        self.local_architectures = os.environ['ARCHS'].split(' ')\n        self.local_built_fw_path = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['WRAPPER_NAME'])\n        self.local_built_embedded_fw_path = os.path.splitext(self.local_built_fw_path)[0] + \".embeddedframework\"\n        self.local_linked_archive_paths = [self.get_linked_ufw_archive_path(arch) for arch in self.local_architectures]\n        self.local_platform = os.environ['PLATFORM_NAME']\n        other_platforms = os.environ['SUPPORTED_PLATFORMS'].split(' ')\n        other_platforms.remove(self.local_platform)\n        self.other_platform = other_platforms[0]\n\n        sdk_name = os.environ['SDK_NAME']\n        if not sdk_name.startswith(self.local_platform):\n            raise Exception(\"%s didn't start with %s\" % (sdk_name, self.local_platform))\n        self.sdk_version = sdk_name[len(self.local_platform):]\n\n    # Load an Xcode project file.\n    #\n    def load_from_file(self, filename):\n        project_file = json.loads(subprocess.check_output([\"plutil\", \"-convert\", \"json\", \"-o\", \"-\", filename]))\n        all_objects = project_file['objects']\n        del project_file['objects']\n        for obj in all_objects.values():\n            self.fix_keys(obj)\n        self.unpack_objects(self.build_dereference_list(all_objects, None, None, project_file))\n        self.unpack_objects(self.build_dereference_list(all_objects, None, None, all_objects.values()))\n        project_data = project_file['rootObject']\n        self.build_full_paths(project_data, splitpath(os.environ['SOURCE_ROOT']))\n        return project_data\n\n    def is_key(self, obj):        \n        return isinstance(obj, basestring) and len(obj) == 24 and re.search('^[0-9a-fA-F]+$', obj) is not None\n    \n    def build_dereference_list(self, all_objects, parent, key, obj):\n        deref_list = []\n        if self.is_key(obj):\n            dereferenced = all_objects.get(obj, obj)\n            if dereferenced is not obj:\n                deref_list.append((parent, key, obj, dereferenced))\n        elif isinstance(obj, collections.Mapping):\n            for k, v in obj.iteritems():\n                deref_list += self.build_dereference_list(all_objects, obj, k, v)\n        elif isinstance(obj, collections.Iterable) and not isinstance(obj, basestring):\n            for item in obj:\n                deref_list += self.build_dereference_list(all_objects, obj, None, item)\n        return deref_list\n    \n    def unpack_objects(self, deref_list):\n        for parent, key, orig, obj in deref_list:\n            if key is None:\n                parent.remove(orig)\n                parent.append(obj)\n            else:\n                parent[key] = obj\n\n    # Store the full path, separated into components, to a node inside the node\n    # as \"pathComponents\". Also recurse into that node if it's a group.\n    #\n    def build_full_paths(self, node, base_path):\n        # Some nodes are relative to a different source tree, specified as an\n        # env variable.\n        if node.get('sourceTree', '<group>') != '<group>':\n            new_base_path = os.environ.get(node['sourceTree'], None)\n            if new_base_path:\n                base_path = splitpath(new_base_path)\n        # Add the current node's path, if any.\n        if node.get('path', False):\n            base_path = base_path + splitpath(node['path'])\n        node['pathComponents'] = base_path\n        # Recurse if this is a group.\n        if node['isa'] == 'PBXGroup':\n            for child in node['children']:\n                self.build_full_paths(child, base_path)\n        elif node['isa'] == 'PBXProject':\n            self.build_full_paths(node['mainGroup'], base_path)\n            self.build_full_paths(node['productRefGroup'], base_path)\n            for child in node['targets']:\n                self.build_full_paths(child, base_path)\n            projectRefs = node.get('projectReferences', None)\n            if projectRefs is not None:\n                for child in projectRefs[0].values():\n                    self.build_full_paths(child, base_path)\n\n    # Fix up any inconvenient keys.\n    #\n    def fix_keys(self, obj):\n        key_remappings = {'lastKnownFileType': 'fileType', 'explicitFileType': 'fileType'}\n        for key in list(set(key_remappings.keys()) & set(obj.keys())):\n            obj[key_remappings[key]] = obj[key]\n            del obj[key]\n\n    # Get the files from a build phase.\n    #\n    def get_build_phase_files(self, build_phase_name, filter_func):\n        build_phase = filter(lambda x: x['isa'] == build_phase_name, self.target['buildPhases'])[0]\n        build_files = filter(filter_func, build_phase['files'])\n        return [x['fileRef'] for x in build_files]\n\n    # Get the truncated paths of all headers that start with the specified\n    # relative path. Paths are read and returned as fully separated lists.\n    # e.g. ['Some', 'Path', 'To', 'A', 'Header'] with relative_path of\n    # ['Some', 'Path'] gets truncated to ['To', 'A', 'Header']\n    #\n    def movable_headers_relative_to(self, relative_path):\n        rel_path_length = len(relative_path)\n        result = filter(lambda path: len(path) >= rel_path_length and\n                                     path[:rel_path_length] == relative_path, self.header_paths)\n        return [path[rel_path_length:] for path in result]\n\n    # Get the full path to where a linkable archive (library or framework)\n    # is supposed to be.\n    #\n    def get_linked_archive_path(self, architecture):\n        return os.path.join(os.environ['OBJECT_FILE_DIR_%s' % os.environ['CURRENT_VARIANT']],\n                            architecture,\n                            os.environ['EXECUTABLE_NAME'])\n\n    # Get the full path to our custom linked archive of the project.\n    #\n    def get_linked_ufw_archive_path(self, architecture):\n        return self.get_linked_archive_path(architecture) + \".ufwbuild\"\n\n    # Get the full path to the executable of an archive.\n    #\n    def get_exe_path(self, node):\n        path = os.path.join(*node['pathComponents'])\n        if node['fileType'] == 'wrapper.framework':\n            # Frameworks are directories, so go one deeper\n            path = os.path.join(path, os.path.splitext(node['pathComponents'][-1])[0])\n        return path\n\n    # Get the path to the directory containing the archive.\n    #\n    def get_containing_path(self, node):\n        return os.path.join(*node['pathComponents'])\n    \n    def get_archive_search_paths(self):\n        log.info(\"Search paths = %s\" % set([self.get_containing_path(fw) for fw in self.static_frameworks] + [self.get_containing_path(fw) for fw in self.static_libraries]))\n        return set([self.get_containing_path(fw) for fw in self.static_frameworks] + [self.get_containing_path(fw) for fw in self.static_libraries])\n\n    # Command to link all objects of a single architecture.\n    #\n    def get_single_arch_link_command(self, architecture):\n        cmd = [self.libtool_path,\n               \"-static\",\n               \"-arch_only\", architecture,\n               \"-syslibroot\", os.environ['SDKROOT'],\n               \"-L%s\" % os.environ['TARGET_BUILD_DIR'],\n               \"-filelist\", os.environ['LINK_FILE_LIST_%s_%s' % (os.environ['CURRENT_VARIANT'], architecture)]]\n        if os.environ.get('OTHER_LDFLAGS', False):\n            cmd += [os.environ['OTHER_LDFLAGS']]\n        if os.environ.get('WARNING_LDFLAGS', False):\n            cmd += [os.environ['WARNING_LDFLAGS']]\n#        cmd += [\"-L%s\" % libpath for libpath in self.get_archive_search_paths()]\n        cmd += [self.get_exe_path(fw) for fw in self.static_frameworks]\n        cmd += [self.get_exe_path(lib) for lib in self.static_libraries]\n        cmd += [\"-o\", self.get_linked_ufw_archive_path(architecture)]\n        return cmd\n\n    # Command to link all local architectures for the current configuration\n    # into an archive. This reads all libraries + the UFW-built archives and\n    # overwrites the final product.\n    #\n    def get_local_archs_link_command(self):\n        cmd = [self.libtool_path,\n               \"-static\"]\n        cmd += self.local_linked_archive_paths\n        cmd += [self.get_exe_path(fw) for fw in self.static_frameworks]\n        cmd += [self.get_exe_path(lib) for lib in self.static_libraries]\n        cmd += [\"-o\", os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['EXECUTABLE_PATH'])]\n        return cmd\n\n    # Command to link all architectures into a universal archive.\n    # This reads all UFW-built archives and overwrites the final product.\n    #\n    def get_all_archs_link_command(self):\n        cmd = [self.libtool_path,\n               \"-static\"]\n        cmd += self.local_linked_archive_paths + self.build_state.slave_linked_archive_paths\n        cmd += [\"-o\", os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['EXECUTABLE_PATH'])]\n        return cmd\n\n    # Build up an environment for the slave process. This uses BUILD_ROOT\n    # and TEMP_ROOT to convert all environment variables to values suitable\n    # for the slave build environment so that xcodebuild doesn't try to build\n    # in the project directory under \"build\".\n    #\n    def get_slave_environment(self):\n        ignored = ['LD_MAP_FILE_PATH',\n        'HEADER_SEARCH_PATHS',\n        'LIBRARY_SEARCH_PATHS',\n        'FRAMEWORK_SEARCH_PATHS']\n        build_root = os.environ['BUILD_ROOT']\n        temp_root = os.environ['TEMP_ROOT']\n        newenv = {}\n        for key, value in os.environ.items():\n            if key not in ignored and not key.startswith('LINK_FILE_LIST_') and not key.startswith('LD_DEPENDENCY_'):\n                if build_root in value or temp_root in value:\n                    newenv[key] = value.replace(self.local_platform, self.other_platform)\n        return newenv\n\n    # Command to invoke xcodebuild on the slave platform.\n    #\n    def get_slave_project_build_command(self):\n        cmd = [\"xcodebuild\",\n               \"-project\",\n               os.environ['PROJECT_FILE_PATH'],\n               \"-target\",\n               os.environ['TARGET_NAME'],\n               \"-configuration\",\n               os.environ['CONFIGURATION'],\n               \"-sdk\",\n               self.other_platform + self.sdk_version]\n        cmd += [\"%s=%s\" % (key, value) for key, value in self.get_slave_environment().items()]\n        cmd += [\"UFW_MASTER_PLATFORM=\" + os.environ['PLATFORM_NAME']]\n        cmd += [os.environ['ACTION']]\n        return cmd\n\n\n\n##############################################################################\n#\n# Utility Functions\n#\n##############################################################################\n\n# Split a path into a list of path components.\n#\ndef splitpath(path, maxdepth=20):\n     (head, tail) = os.path.split(path)\n     return splitpath(head, maxdepth - 1) + [tail] if maxdepth and head and head != path else [ head or tail ]\n\n# Remove all subdirectories under a path.\n#\ndef remove_subdirs(path, ignore_files):\n    if os.path.exists(path):\n        for filename in filter(lambda x: x not in ignore_files, os.listdir(path)):\n            fullpath = os.path.join(path, filename)\n            if os.path.isdir(fullpath):\n                log.info(\"Remove %s\" % fullpath)\n                shutil.rmtree(fullpath)\n\n# Make whatever parent paths are necessary for a path to exist.\n#\ndef ensure_path_exists(path):\n    if not os.path.isdir(path):\n        os.makedirs(path)\n\n# Make whatever parent paths are necessary for a path's parent to exist.\n#\ndef ensure_parent_exists(path):\n    parent = os.path.dirname(path)\n    if not os.path.isdir(parent):\n        os.makedirs(parent)\n\n# Remove a file or dir if it exists.\n#\ndef remove_path(path):\n    if os.path.exists(path):\n        if os.path.isdir(path) and not os.path.islink(path):\n            shutil.rmtree(path)\n        else:\n            os.remove(path)\n\n# Move a file or dir, replacing the destination if it exists.\n#\ndef move_file(src, dst):\n    if src == dst or not os.path.isfile(src):\n        return\n    log.info(\"Move %s to %s\" % (src, dst))\n    ensure_parent_exists(dst)\n    remove_path(dst)\n    shutil.move(src, dst)\n\n# Copy a file or dir, replacing the destination if it exists already.\n#\ndef copy_overwrite(src, dst):\n    if src != dst:\n        remove_path(dst)\n        ensure_parent_exists(dst)\n        shutil.copytree(src, dst, symlinks=True)\n\n# Attempt to symlink link_path -> link_to.\n# link_to must be a path relative to link_path's parent and must exist.\n# If link_path already exists, do nothing.\n#\ndef attempt_symlink(link_path, link_to):\n    # Only allow linking to an existing file\n    os.stat(os.path.abspath(os.path.join(link_path, \"..\", link_to)))\n\n    # Only make the link if it hasn't already been made\n    if not os.path.exists(link_path):\n        log.info(\"Symlink %s -> %s\" % (link_path, link_to))\n        os.symlink(link_to, link_path)\n\n# Takes the last entry in an array-based path and returns a normal path\n# relative to base_path.\n#\ndef top_level_file_path(base_path, path_list):\n    return os.path.join(base_path, os.path.split(path_list[-1])[-1])\n\n# Takes all entries in an array-based path and returns a normal path\n# relative to base_path.\n#\ndef full_file_path(base_path, path_list):\n    return os.path.join(*([base_path] + path_list))\n\n# Print a command before executing it.\n# Also print out all output from the command to STDOUT.\n#\ndef print_and_call(cmd):\n    log.info(\"Cmd \" + \" \".join(cmd))\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    result = p.communicate()[0]\n    if len(result) > 0:\n        log.info(result)\n    if p.returncode != 0:\n        raise subprocess.CalledProcessError(p.returncode, cmd)\n\n# Special print-and-call command for the slave build that strips out\n# xcodebuild's spammy list of environment variables.\n#\ndef print_and_call_slave_build(cmd, other_platform):\n    separator = '=== BUILD NATIVE TARGET '\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    result = p.communicate()[0].split(separator)\n    if len(result) == 1:\n        result = result[0]\n    else:\n        result = separator + result[1]\n    log.info(\"Cmd \" + \" \".join(cmd) + \"\\n\" + result)\n    if p.returncode != 0:\n        raise subprocess.CalledProcessError(p.returncode, cmd)\n\n# Issue a warning and record that a warning has been issued.\n#\ndef issue_warning(msg, *args, **kwargs):\n    global issued_warnings\n    issued_warnings = True\n    log.warn(msg, *args, **kwargs)\n\n\n\n##############################################################################\n#\n# Main Application\n#\n##############################################################################\n\n# Check if we are running as master.\n#\ndef is_master():\n    return os.environ.get('UFW_MASTER_PLATFORM', os.environ['PLATFORM_NAME']) == os.environ['PLATFORM_NAME']\n\n# DerivedData should almost never appear in any framework, library, or header\n# search paths. However, Xcode will sometimes add them in, so we check to make\n# sure.\n#\ndef check_for_derived_data_in_search_paths(project):\n    search_path_keys = [\"FRAMEWORK_SEARCH_PATHS\", \"LIBRARY_SEARCH_PATHS\", \"HEADER_SEARCH_PATHS\"]\n    build_configs = project.target['buildConfigurationList']['buildConfigurations']\n    build_settings = filter(lambda x: x['name'] == os.environ['CONFIGURATION'], build_configs)[0]['buildSettings']\n    \n    found_something = False\n    for path_key in filter(lambda x: x in build_settings, search_path_keys):\n        path = build_settings[path_key]\n        if \"DerivedData\" in path:\n            found_something = True\n            log.warn(\"Derived data in %s\" % path)\n            issue_warning(\"'%s' contains reference to 'DerivedData'.\" % path_key)\n    if found_something:\n        log.warn(\"Check your build settings and remove any entries that contain paths inside the DerivedData folder.\")\n        log.warn(\"Otherwise you can disable this warning by changing 'config_warn_derived_data' in this script.\")\n\n# Link local architectures into their respective archives.\n#\ndef link_local_archs(project):\n    for arch in project.local_architectures:\n        print_and_call(project.get_single_arch_link_command(arch))\n\n# Link only the local architectures into the final product, not the slave\n# architectures. For iphoneos, this will be armv6, armv7. For simulator, this\n# will be i386.\n#\ndef link_combine_local_archs(project):\n    print_and_call(project.get_local_archs_link_command())\n\n# Link all architectures into the final product.\n#\ndef link_combine_all_archs(project):\n    print_and_call(project.get_all_archs_link_command())\n\n# Check if we should open the build directory after a successful build.\n#\ndef should_open_build_dir():\n    env_setting = os.environ.get('UFW_OPEN_BUILD_DIR', None)\n    if env_setting is not None:\n        return env_setting\n\n    return config_open_build_dir\n\n# Open the build dir in Finder.\n#\ndef open_build_dir():\n    print_and_call(['open', os.environ['TARGET_BUILD_DIR']])\n\n# Check if the build was started by selecting \"Archive\" under \"Product\" in\n# Xcode.\n#\ndef is_archive_build():\n    # ACTION is always 'build', but perhaps Apple will fix this someday?\n    archive_build = os.environ['ACTION'] == 'archive'\n\n    if not archive_build:\n        # This can be passed in as an env variable when building from command line.\n        archive_build = os.environ.get('UFW_ACTION', None) == 'archive'\n\n    build_dir = splitpath(os.environ['BUILD_DIR'])\n    if not archive_build:\n        # This partial path is used when you select \"archive\" from within Xcode.\n        archive_build = 'ArchiveIntermediates' in build_dir\n\n    # It only counts as a full archive build if this target is being built into\n    # its own build dir (not being built as a dependency of another target)\n    if archive_build:\n        archive_build = os.environ['TARGET_NAME'] in build_dir\n    \n    return archive_build\n\n# Xcode by default throws all public headers into the top level directory.\n# This function moves them to their expected deep hierarchy.\n#\ndef build_deep_header_hierarchy(project):\n    header_path_top = config_deep_header_top\n    if not header_path_top:\n        header_path_top = os.path.commonprefix(project.header_paths)\n    else:\n        header_path_top = splitpath(header_path_top)\n\n    built_headers_path = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['PUBLIC_HEADERS_FOLDER_PATH'])\n    movable_headers = project.movable_headers_relative_to(header_path_top)\n\n    # Remove subdirs if they only contain files that have been rebuilt\n    ignore_headers = filter(lambda x: not os.path.isfile(top_level_file_path(built_headers_path, x)), movable_headers)\n    remove_subdirs(built_headers_path, [file[0] for file in ignore_headers])\n\n    # Move rebuilt headers into their proper subdirs\n    for header in movable_headers:\n        move_file(top_level_file_path(built_headers_path, header), full_file_path(built_headers_path, header))\n\n# Add all symlinks needed to make a full framework structure:\n#\n# MyFramework.framework\n# |-- MyFramework -> Versions/Current/MyFramework\n# |-- Headers -> Versions/Current/Headers\n# |-- Resources -> Versions/Current/Resources\n# `-- Versions\n#     |-- A\n#     |   |-- MyFramework\n#     |   |-- Headers\n#     |   |   `-- MyFramework.h\n#     |   `-- Resources\n#     |       |-- Info.plist\n#     |       |-- MyViewController.nib\n#     |       `-- en.lproj\n#     |           `-- InfoPlist.strings\n#     `-- Current -> A\n#\ndef add_symlinks_to_framework(project):\n    base_dir = project.local_built_fw_path\n    attempt_symlink(os.path.join(base_dir, \"Versions\", \"Current\"), os.environ['FRAMEWORK_VERSION'])\n    if os.path.isdir(os.path.join(base_dir, \"Versions\", \"Current\", \"Headers\")):\n        attempt_symlink(os.path.join(base_dir, \"Headers\"), os.path.join(\"Versions\", \"Current\", \"Headers\"))\n    if os.path.isdir(os.path.join(base_dir, \"Versions\", \"Current\", \"Resources\")):\n        attempt_symlink(os.path.join(base_dir, \"Resources\"), os.path.join(\"Versions\", \"Current\", \"Resources\"))\n    attempt_symlink(os.path.join(base_dir, os.environ['EXECUTABLE_NAME']), os.path.join(\"Versions\", \"Current\", os.environ['EXECUTABLE_NAME']))\n\n# Build an embedded framework structure.\n# An embedded framework contains the actual framework, plus a \"Resources\"\n# directory containing symlinks to all resources found in the actual framework,\n# with the exception of \"Info.plist\" and anything ending in \".lproj\":\n#\n# MyFramework.embeddedframework\n# |-- MyFramework.framework\n# |   |-- MyFramework -> Versions/Current/MyFramework\n# |   |-- Headers -> Versions/Current/Headers\n# |   |-- Resources -> Versions/Current/Resources\n# |   `-- Versions\n# |       |-- A\n# |       |   |-- MyFramework\n# |       |   |-- Headers\n# |       |   |   `-- MyFramework.h\n# |       |   `-- Resources\n# |       |       |-- Info.plist\n# |       |       |-- MyViewController.nib\n# |       |       `-- en.lproj\n# |       |           `-- InfoPlist.strings\n# |       `-- Current -> A\n# `-- Resources\n#     `-- MyViewController.nib -> ../MyFramework.framework/Resources/MyViewController.nib\n#\ndef build_embedded_framework(project):\n    fw_path = project.local_built_fw_path\n    embedded_path = project.local_built_embedded_fw_path\n    fw_name = os.environ['WRAPPER_NAME']\n\n    if (os.path.islink(fw_path)):\n        # If the framework path is a link, the build result already in embeddedframework.\n        # Just recreate embeddedframework's Resources\n        remove_path(os.path.join(embedded_path, \"Resources\"))\n    else:\n        remove_path(embedded_path)\n        ensure_path_exists(embedded_path)\n        copy_overwrite(fw_path, os.path.join(embedded_path, fw_name))\n\n    # Create embeddedframework's Resources        \n    ensure_path_exists(os.path.join(embedded_path, \"Resources\"))\n    symlink_source = os.path.join(\"..\", fw_name, \"Resources\")\n    symlink_path = os.path.join(embedded_path, \"Resources\")\n    if os.path.isdir(os.path.join(fw_path, \"Resources\")):\n        for file in filter(lambda x: x != \"Info.plist\" and not x.endswith(\".lproj\"), os.listdir(os.path.join(fw_path, \"Resources\"))):\n            attempt_symlink(os.path.join(symlink_path, file), os.path.join(symlink_source, file))\n\n    # Remove the normal framework and replace it with a symlink to the copy\n    # in the embedded framework. This is needed because Xcode runs its strip\n    # phase AFTER the script runs.\n    embed_fw_wrapper = os.path.splitext(os.environ['WRAPPER_NAME'])[0] + \".embeddedframework\"\n    remove_path(fw_path)\n    attempt_symlink(fw_path, os.path.join(embed_fw_wrapper, os.environ['WRAPPER_NAME']))\n\n\n# Run the build process in slave mode to build the other configuration\n# (device/simulator).\n#\ndef run_slave_build(project):\n    print_and_call_slave_build(project.get_slave_project_build_command(), project.other_platform)\n\n# Run the build process.\n#\ndef run_build():\n    project = Project(os.path.join(os.environ['PROJECT_FILE_PATH'], \"project.pbxproj\"))\n\n    # Issue warnings only if we're master.\n    if is_master():\n        if len(project.compilable_sources) == 0:\n            raise Exception(\"No compilable sources found. Please add at least one source file to build target %s.\" % os.environ['TARGET_NAME'])\n\n        if config_warn_derived_data:\n            check_for_derived_data_in_search_paths(project)\n        if config_warn_no_public_headers and len(project.public_headers) == 0:\n            issue_warning('No headers in build target %s were marked public. Please move at least one header to \"Public\" in the \"Copy Headers\" build phase.' % os.environ['TARGET_NAME'])\n\n    # Only build slave if this is an archive build.\n    if is_archive_build():\n        if is_master():\n            log.debug(\"Building as MASTER\")\n            # The slave-side linker tries to include this (nonexistent) path as\n            # a library path.\n            ensure_path_exists(project.get_slave_environment()['BUILT_PRODUCTS_DIR'])\n            project.build_state.persist()\n            run_slave_build(project)\n            project.build_state.reload()\n        else:\n            log.debug(\"Building as SLAVE\")\n            project.build_state.reload()\n            project.build_state.set_slave_properties(project.local_architectures,\n                                                     project.local_linked_archive_paths,\n                                                     project.local_built_fw_path,\n                                                     project.local_built_embedded_fw_path)\n            project.build_state.persist()\n\n    link_local_archs(project)\n    \n    # Only do a universal binary when building an archive.\n    if is_archive_build() and is_master():\n        link_combine_all_archs(project)\n    else:\n        link_combine_local_archs(project)\n\n    if config_deep_header_hierarchy:\n        build_deep_header_hierarchy(project)\n\n    add_symlinks_to_framework(project)\n    \n    if is_master():\n        if config_framework_type == 'embeddedframework':\n            build_embedded_framework(project)\n        elif config_framework_type != 'framework':\n            raise Exception(\"%s: Unknown framework type for config_framework_type\" % config_framework_type)\n\n\nif __name__ == \"__main__\":\n    log_handler = logging.StreamHandler()\n    log_handler.setFormatter(logging.Formatter(\"%(name)s (\" + os.environ['PLATFORM_NAME'] + \"): %(levelname)s: %(message)s\"))\n    log.addHandler(log_handler)\n    log.setLevel(config_log_level)\n\n    error_code = 0\n    prefix = \"M\" if is_master() else \"S\"\n    log_handler.setFormatter(logging.Formatter(\"%(name)s (\" + prefix + \" \" + os.environ['PLATFORM_NAME'] + \"): %(levelname)s: %(message)s\"))\n\n    log.debug(\"Begin build process\")\n\n    if config_deep_header_top:\n        config_deep_header_top = string.Template(config_deep_header_top).substitute(os.environ)\n\n    try:\n        run_build()\n        if issued_warnings:\n            if config_fail_on_warnings:\n                error_code = 1\n            log.warn(\"Build completed with warnings\")\n        else:\n            log.info(\"Build completed\")\n        if not is_archive_build():\n            log.info(\"Note: This is *NOT* a universal framework build. To build as a universal framework, do an archive build.\")\n            log.info(\"To do an archive build from command line, use \\\"xcodebuild -configuration Release UFW_ACTION=archive clean build\\\"\")\n    except Exception:\n        traceback.print_exc(file=sys.stdout)\n        error_code = 1\n        log.error(\"Build failed\")\n    finally:\n        if error_code == 0 and is_archive_build() and is_master():\n            log.info(\"Built framework is in \" + os.environ['TARGET_BUILD_DIR'])\n            if should_open_build_dir():\n                open_build_dir()\n        sys.exit(error_code)\n";
		};
		F1B601801922A12500B65371 /* ShellScript */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /usr/bin/python;
			shellScript = "# TAG: BUILD SCRIPT (do not remove this comment)\n# Build script generated using https://github.com/kstenerud/iOS-Universal-Framework Mk 8 (beta 2012-06-16)\nimport logging\n\n\n##############################################################################\n#\n# Configuration\n#\n##############################################################################\n\n# Select which kind of framework to build.\n#\n# Note: Due to issues with Xcode's build process, if you select\n#       'embeddedframework', it will still show the regular framework\n#       (as a symlink) along side of the embedded framework. Be sure to\n#       instructfile://localhost/Users/rob/xl/omnia-pushsdk-ios/OmniaPushSDK/src/Public%20Headers/OmniaPushRegistrationListener.h your users to copy/move the embedded framework in this case!\n#\n# If your framework contains resources such as images, nibs, momds, plists,\n# zipfiles and such, choose 'embeddedframework'.\n#\n# If your framework contains no resources, choose 'framework'.\n#\nconfig_framework_type = 'framework'\n#config_framework_type = 'embeddedframework'\n\n# Open the build directory in Finder when the universal framework is\n# successfully built.\n#\n# This value can be overridden by setting the UFW_OPEN_BUILD_DIR env variable\n# to True or False.\n#\n# Recommended setting: True\n#\nconfig_open_build_dir = True\n\n# If true, ensures that all public headers are stored in the framework under\n# the same directory hierarchy as they were in the source tree.\n#\n# Xcode by default places all headers at the same top level, but every other\n# build tool in the known universe preserves directory structure. For simple\n# libraries it doesn't really matter much, but for ports of existing software\n# packages or for bigger libraries, it makes sense to have more structure.\n#\n# The default is set to \"False\" since that's what most Xcode users are used to.\n#\n# Recommended setting: True for deep hierarchy projects, False otherwise.\n#\nconfig_deep_header_hierarchy = False\n\n# Specify where the top of the public header hierarchy is. This path is\n# relative to the project's dir (PROJECT_DIR). You can reference environment\n# variables using templating syntax (e.g. \"${TARGET_NAME}/Some/Subdir\")\n#\n# NOTE: Only used if config_deep_header_hierarchy is True.\n#\n# If this is set to None, the script will attempt to figure out for itself\n# where the top of the header hierarchy is by looking for common path prefixes\n# in the public header files. This process can fail if:\n# - You only have one public header file.\n# - Your source header files don't all have a common root.\n#\n# A common approach is to use \"${TARGET_NAME}\", working under the assumption\n# that all of your header files share the common root of a directory under\n# your project with the same name as your target (which is the Xcode default).\n#\n# Recommended setting: \"${TARGET_NAME}\"\n#\nconfig_deep_header_top = \"${TARGET_NAME}\"\n\n# Warn when \"DerivedData\" is detected in any of the header, library, or\n# framework search paths. In almost all cases, references to directories under\n# DerivedData are added as a result of an Xcode bug and must be manually\n# removed.\n#\n# Recommended setting: True\n#\nconfig_warn_derived_data = True\n\n# Warn if no headers were marked public in this framework.\n#\n# Recommended setting: True\n#\nconfig_warn_no_public_headers = True\n\n# Cause the build to fail if any warnings are issued.\n#\n# Recommended setting: True\n#\nconfig_fail_on_warnings = True\n\n# Minimum log level\n#\n# Recommended setting: logging.INFO\n#\nconfig_log_level = logging.INFO\n\n\n##############################################################################\n#\n# Don't touch anything below here unless you know what you're doing.\n#\n##############################################################################\n\nimport collections\nimport json\nimport os\nimport re\nimport shlex\nimport shutil\nimport string\nimport subprocess\nimport sys\nimport time\nimport traceback\n\n\n##############################################################################\n#\n# Globals\n#\n##############################################################################\n\nlog = logging.getLogger('UFW')\n\nissued_warnings = False\n\n\n##############################################################################\n#\n# Classes\n#\n##############################################################################\n\n# Allows the slave build to communicate with the master build.\n#\nclass BuildState:\n\n    def __init__(self):\n        self.reload()\n\n    def reset(self):\n        self.slave_platform = None\n        self.slave_architectures = []\n        self.slave_linked_archive_paths = []\n        self.slave_built_fw_path = None\n        self.slave_built_embedded_fw_path = None\n\n    def set_slave_properties(self, architectures,\n                             linked_archive_paths,\n                             built_fw_path,\n                             built_embedded_fw_path):\n        self.slave_platform = os.environ['PLATFORM_NAME']\n        self.slave_architectures = architectures\n        self.slave_linked_archive_paths = linked_archive_paths\n        self.slave_built_fw_path = built_fw_path\n        self.slave_built_embedded_fw_path = built_embedded_fw_path\n\n    def get_save_path(self):\n        return os.path.join(os.environ['PROJECT_TEMP_DIR'], \"ufw_build_state.json\")\n\n    def persist(self):\n        filename = self.get_save_path()\n        parent = os.path.dirname(filename)\n        if not os.path.isdir(parent):\n            os.makedirs(parent)\n        with open(filename, \"w\") as f:\n            f.write(json.dumps(self.__dict__))\n\n    def reload(self):\n        self.reset()\n        filename = self.get_save_path()\n        if os.path.exists(filename):\n            with open(filename, \"r\") as f:\n                new_dict = json.loads(f.read())\n                if new_dict is not None:\n                    self.__dict__ = dict(self.__dict__.items() + new_dict.items())\n\n\n# Holds information about the current project and build environment.\n#\nclass Project:\n\n    def __init__(self, filename):\n        sourcecode_types = ['sourcecode.c.c',\n                            'sourcecode.c.objc',\n                            'sourcecode.cpp.cpp',\n                            'sourcecode.cpp.objcpp',\n                            'sourcecode.asm.asm',\n                            'sourcecode.asm.llvm',\n                            'sourcecode.nasm']\n\n        self.build_state = BuildState()\n        self.project_data = self.load_from_file(filename)\n        self.target = filter(lambda x: x['name'] == os.environ['TARGET_NAME'], self.project_data['targets'])[0]\n        self.public_headers = self.get_build_phase_files('PBXHeadersBuildPhase', lambda x: x.get('settings', False) and x['settings'].get('ATTRIBUTES', False) and 'Public' in x['settings']['ATTRIBUTES'])\n        self.static_libraries = self.get_build_phase_files('PBXFrameworksBuildPhase', lambda x: x['fileRef']['fileType'] == 'archive.ar' and x['fileRef']['sourceTree'] not in ['DEVELOPER_DIR', 'SDKROOT'])\n        self.static_frameworks = self.get_build_phase_files('PBXFrameworksBuildPhase', lambda x: x['fileRef']['fileType'] == 'wrapper.framework' and x['fileRef']['sourceTree'] not in ['DEVELOPER_DIR', 'SDKROOT'])\n        self.compilable_sources = self.get_build_phase_files('PBXSourcesBuildPhase', lambda x: x['fileRef']['fileType'] in sourcecode_types)\n        self.header_paths = [os.path.join(*x['pathComponents']) for x in self.public_headers]\n\n        self.headers_dir = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['CONTENTS_FOLDER_PATH'], 'Headers')\n        self.libtool_path = os.path.join(os.environ['DT_TOOLCHAIN_DIR'], 'usr', 'bin', 'libtool')\n        self.project_filename = os.path.join(os.environ['PROJECT_FILE_PATH'], \"project.pbxproj\")\n        self.local_exe_path = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['EXECUTABLE_PATH'])\n        self.local_architectures = os.environ['ARCHS'].split(' ')\n        self.local_built_fw_path = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['WRAPPER_NAME'])\n        self.local_built_embedded_fw_path = os.path.splitext(self.local_built_fw_path)[0] + \".embeddedframework\"\n        self.local_linked_archive_paths = [self.get_linked_ufw_archive_path(arch) for arch in self.local_architectures]\n        self.local_platform = os.environ['PLATFORM_NAME']\n        other_platforms = os.environ['SUPPORTED_PLATFORMS'].split(' ')\n        other_platforms.remove(self.local_platform)\n        self.other_platform = other_platforms[0]\n\n        sdk_name = os.environ['SDK_NAME']\n        if not sdk_name.startswith(self.local_platform):\n            raise Exception(\"%s didn't start with %s\" % (sdk_name, self.local_platform))\n        self.sdk_version = sdk_name[len(self.local_platform):]\n\n    # Load an Xcode project file.\n    #\n    def load_from_file(self, filename):\n        project_file = json.loads(subprocess.check_output([\"plutil\", \"-convert\", \"json\", \"-o\", \"-\", filename]))\n        all_objects = project_file['objects']\n        del project_file['objects']\n        for obj in all_objects.values():\n            self.fix_keys(obj)\n        self.unpack_objects(self.build_dereference_list(all_objects, None, None, project_file))\n        self.unpack_objects(self.build_dereference_list(all_objects, None, None, all_objects.values()))\n        project_data = project_file['rootObject']\n        self.build_full_paths(project_data, splitpath(os.environ['SOURCE_ROOT']))\n        return project_data\n\n    def is_key(self, obj):        \n        return isinstance(obj, basestring) and len(obj) == 24 and re.search('^[0-9a-fA-F]+$', obj) is not None\n    \n    def build_dereference_list(self, all_objects, parent, key, obj):\n        deref_list = []\n        if self.is_key(obj):\n            dereferenced = all_objects.get(obj, obj)\n            if dereferenced is not obj:\n                deref_list.append((parent, key, obj, dereferenced))\n        elif isinstance(obj, collections.Mapping):\n            for k, v in obj.iteritems():\n                deref_list += self.build_dereference_list(all_objects, obj, k, v)\n        elif isinstance(obj, collections.Iterable) and not isinstance(obj, basestring):\n            for item in obj:\n                deref_list += self.build_dereference_list(all_objects, obj, None, item)\n        return deref_list\n    \n    def unpack_objects(self, deref_list):\n        for parent, key, orig, obj in deref_list:\n            if key is None:\n                parent.remove(orig)\n                parent.append(obj)\n            else:\n                parent[key] = obj\n\n    # Store the full path, separated into components, to a node inside the node\n    # as \"pathComponents\". Also recurse into that node if it's a group.\n    #\n    def build_full_paths(self, node, base_path):\n        # Some nodes are relative to a different source tree, specified as an\n        # env variable.\n        if node.get('sourceTree', '<group>') != '<group>':\n            new_base_path = os.environ.get(node['sourceTree'], None)\n            if new_base_path:\n                base_path = splitpath(new_base_path)\n        # Add the current node's path, if any.\n        if node.get('path', False):\n            base_path = base_path + splitpath(node['path'])\n        node['pathComponents'] = base_path\n        # Recurse if this is a group.\n        if node['isa'] == 'PBXGroup':\n            for child in node['children']:\n                self.build_full_paths(child, base_path)\n        elif node['isa'] == 'PBXProject':\n            self.build_full_paths(node['mainGroup'], base_path)\n            self.build_full_paths(node['productRefGroup'], base_path)\n            for child in node['targets']:\n                self.build_full_paths(child, base_path)\n            projectRefs = node.get('projectReferences', None)\n            if projectRefs is not None:\n                for child in projectRefs[0].values():\n                    self.build_full_paths(child, base_path)\n\n    # Fix up any inconvenient keys.\n    #\n    def fix_keys(self, obj):\n        key_remappings = {'lastKnownFileType': 'fileType', 'explicitFileType': 'fileType'}\n        for key in list(set(key_remappings.keys()) & set(obj.keys())):\n            obj[key_remappings[key]] = obj[key]\n            del obj[key]\n\n    # Get the files from a build phase.\n    #\n    def get_build_phase_files(self, build_phase_name, filter_func):\n        build_phase = filter(lambda x: x['isa'] == build_phase_name, self.target['buildPhases'])[0]\n        build_files = filter(filter_func, build_phase['files'])\n        return [x['fileRef'] for x in build_files]\n\n    # Get the truncated paths of all headers that start with the specified\n    # relative path. Paths are read and returned as fully separated lists.\n    # e.g. ['Some', 'Path', 'To', 'A', 'Header'] with relative_path of\n    # ['Some', 'Path'] gets truncated to ['To', 'A', 'Header']\n    #\n    def movable_headers_relative_to(self, relative_path):\n        rel_path_length = len(relative_path)\n        result = filter(lambda path: len(path) >= rel_path_length and\n                                     path[:rel_path_length] == relative_path, self.header_paths)\n        return [path[rel_path_length:] for path in result]\n\n    # Get the full path to where a linkable archive (library or framework)\n    # is supposed to be.\n    #\n    def get_linked_archive_path(self, architecture):\n        return os.path.join(os.environ['OBJECT_FILE_DIR_%s' % os.environ['CURRENT_VARIANT']],\n                            architecture,\n                            os.environ['EXECUTABLE_NAME'])\n\n    # Get the full path to our custom linked archive of the project.\n    #\n    def get_linked_ufw_archive_path(self, architecture):\n        return self.get_linked_archive_path(architecture) + \".ufwbuild\"\n\n    # Get the full path to the executable of an archive.\n    #\n    def get_exe_path(self, node):\n        path = os.path.join(*node['pathComponents'])\n        if node['fileType'] == 'wrapper.framework':\n            # Frameworks are directories, so go one deeper\n            path = os.path.join(path, os.path.splitext(node['pathComponents'][-1])[0])\n        return path\n\n    # Get the path to the directory containing the archive.\n    #\n    def get_containing_path(self, node):\n        return os.path.join(*node['pathComponents'])\n    \n    def get_archive_search_paths(self):\n        log.info(\"Search paths = %s\" % set([self.get_containing_path(fw) for fw in self.static_frameworks] + [self.get_containing_path(fw) for fw in self.static_libraries]))\n        return set([self.get_containing_path(fw) for fw in self.static_frameworks] + [self.get_containing_path(fw) for fw in self.static_libraries])\n\n    # Command to link all objects of a single architecture.\n    #\n    def get_single_arch_link_command(self, architecture):\n        cmd = [self.libtool_path,\n               \"-static\",\n               \"-arch_only\", architecture,\n               \"-syslibroot\", os.environ['SDKROOT'],\n               \"-L%s\" % os.environ['TARGET_BUILD_DIR'],\n               \"-filelist\", os.environ['LINK_FILE_LIST_%s_%s' % (os.environ['CURRENT_VARIANT'], architecture)]]\n        if os.environ.get('OTHER_LDFLAGS', False):\n            cmd += [os.environ['OTHER_LDFLAGS']]\n        if os.environ.get('WARNING_LDFLAGS', False):\n            cmd += [os.environ['WARNING_LDFLAGS']]\n#        cmd += [\"-L%s\" % libpath for libpath in self.get_archive_search_paths()]\n        cmd += [self.get_exe_path(fw) for fw in self.static_frameworks]\n        cmd += [self.get_exe_path(lib) for lib in self.static_libraries]\n        cmd += [\"-o\", self.get_linked_ufw_archive_path(architecture)]\n        return cmd\n\n    # Command to link all local architectures for the current configuration\n    # into an archive. This reads all libraries + the UFW-built archives and\n    # overwrites the final product.\n    #\n    def get_local_archs_link_command(self):\n        cmd = [self.libtool_path,\n               \"-static\"]\n        cmd += self.local_linked_archive_paths\n        cmd += [self.get_exe_path(fw) for fw in self.static_frameworks]\n        cmd += [self.get_exe_path(lib) for lib in self.static_libraries]\n        cmd += [\"-o\", os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['EXECUTABLE_PATH'])]\n        return cmd\n\n    # Command to link all architectures into a universal archive.\n    # This reads all UFW-built archives and overwrites the final product.\n    #\n    def get_all_archs_link_command(self):\n        cmd = [self.libtool_path,\n               \"-static\"]\n        cmd += self.local_linked_archive_paths + self.build_state.slave_linked_archive_paths\n        cmd += [\"-o\", os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['EXECUTABLE_PATH'])]\n        return cmd\n\n    # Build up an environment for the slave process. This uses BUILD_ROOT\n    # and TEMP_ROOT to convert all environment variables to values suitable\n    # for the slave build environment so that xcodebuild doesn't try to build\n    # in the project directory under \"build\".\n    #\n    def get_slave_environment(self):\n        ignored = ['LD_MAP_FILE_PATH',\n        'HEADER_SEARCH_PATHS',\n        'LIBRARY_SEARCH_PATHS',\n        'FRAMEWORK_SEARCH_PATHS']\n        build_root = os.environ['BUILD_ROOT']\n        temp_root = os.environ['TEMP_ROOT']\n        newenv = {}\n        for key, value in os.environ.items():\n            if key not in ignored and not key.startswith('LINK_FILE_LIST_') and not key.startswith('LD_DEPENDENCY_'):\n                if build_root in value or temp_root in value:\n                    newenv[key] = value.replace(self.local_platform, self.other_platform)\n        return newenv\n\n    # Command to invoke xcodebuild on the slave platform.\n    #\n    def get_slave_project_build_command(self):\n        cmd = [\"xcodebuild\",\n               \"-project\",\n               os.environ['PROJECT_FILE_PATH'],\n               \"-target\",\n               os.environ['TARGET_NAME'],\n               \"-configuration\",\n               os.environ['CONFIGURATION'],\n               \"-sdk\",\n               self.other_platform + self.sdk_version]\n        cmd += [\"%s=%s\" % (key, value) for key, value in self.get_slave_environment().items()]\n        cmd += [\"UFW_MASTER_PLATFORM=\" + os.environ['PLATFORM_NAME']]\n        cmd += [os.environ['ACTION']]\n        return cmd\n\n\n\n##############################################################################\n#\n# Utility Functions\n#\n##############################################################################\n\n# Split a path into a list of path components.\n#\ndef splitpath(path, maxdepth=20):\n     (head, tail) = os.path.split(path)\n     return splitpath(head, maxdepth - 1) + [tail] if maxdepth and head and head != path else [ head or tail ]\n\n# Remove all subdirectories under a path.\n#\ndef remove_subdirs(path, ignore_files):\n    if os.path.exists(path):\n        for filename in filter(lambda x: x not in ignore_files, os.listdir(path)):\n            fullpath = os.path.join(path, filename)\n            if os.path.isdir(fullpath):\n                log.info(\"Remove %s\" % fullpath)\n                shutil.rmtree(fullpath)\n\n# Make whatever parent paths are necessary for a path to exist.\n#\ndef ensure_path_exists(path):\n    if not os.path.isdir(path):\n        os.makedirs(path)\n\n# Make whatever parent paths are necessary for a path's parent to exist.\n#\ndef ensure_parent_exists(path):\n    parent = os.path.dirname(path)\n    if not os.path.isdir(parent):\n        os.makedirs(parent)\n\n# Remove a file or dir if it exists.\n#\ndef remove_path(path):\n    if os.path.exists(path):\n        if os.path.isdir(path) and not os.path.islink(path):\n            shutil.rmtree(path)\n        else:\n            os.remove(path)\n\n# Move a file or dir, replacing the destination if it exists.\n#\ndef move_file(src, dst):\n    if src == dst or not os.path.isfile(src):\n        return\n    log.info(\"Move %s to %s\" % (src, dst))\n    ensure_parent_exists(dst)\n    remove_path(dst)\n    shutil.move(src, dst)\n\n# Copy a file or dir, replacing the destination if it exists already.\n#\ndef copy_overwrite(src, dst):\n    if src != dst:\n        remove_path(dst)\n        ensure_parent_exists(dst)\n        shutil.copytree(src, dst, symlinks=True)\n\n# Attempt to symlink link_path -> link_to.\n# link_to must be a path relative to link_path's parent and must exist.\n# If link_path already exists, do nothing.\n#\ndef attempt_symlink(link_path, link_to):\n    # Only allow linking to an existing file\n    os.stat(os.path.abspath(os.path.join(link_path, \"..\", link_to)))\n\n    # Only make the link if it hasn't already been made\n    if not os.path.exists(link_path):\n        log.info(\"Symlink %s -> %s\" % (link_path, link_to))\n        os.symlink(link_to, link_path)\n\n# Takes the last entry in an array-based path and returns a normal path\n# relative to base_path.\n#\ndef top_level_file_path(base_path, path_list):\n    return os.path.join(base_path, os.path.split(path_list[-1])[-1])\n\n# Takes all entries in an array-based path and returns a normal path\n# relative to base_path.\n#\ndef full_file_path(base_path, path_list):\n    return os.path.join(*([base_path] + path_list))\n\n# Print a command before executing it.\n# Also print out all output from the command to STDOUT.\n#\ndef print_and_call(cmd):\n    log.info(\"Cmd \" + \" \".join(cmd))\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    result = p.communicate()[0]\n    if len(result) > 0:\n        log.info(result)\n    if p.returncode != 0:\n        raise subprocess.CalledProcessError(p.returncode, cmd)\n\n# Special print-and-call command for the slave build that strips out\n# xcodebuild's spammy list of environment variables.\n#\ndef print_and_call_slave_build(cmd, other_platform):\n    separator = '=== BUILD NATIVE TARGET '\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    result = p.communicate()[0].split(separator)\n    if len(result) == 1:\n        result = result[0]\n    else:\n        result = separator + result[1]\n    log.info(\"Cmd \" + \" \".join(cmd) + \"\\n\" + result)\n    if p.returncode != 0:\n        raise subprocess.CalledProcessError(p.returncode, cmd)\n\n# Issue a warning and record that a warning has been issued.\n#\ndef issue_warning(msg, *args, **kwargs):\n    global issued_warnings\n    issued_warnings = True\n    log.warn(msg, *args, **kwargs)\n\n\n\n##############################################################################\n#\n# Main Application\n#\n##############################################################################\n\n# Check if we are running as master.\n#\ndef is_master():\n    return os.environ.get('UFW_MASTER_PLATFORM', os.environ['PLATFORM_NAME']) == os.environ['PLATFORM_NAME']\n\n# DerivedData should almost never appear in any framework, library, or header\n# search paths. However, Xcode will sometimes add them in, so we check to make\n# sure.\n#\ndef check_for_derived_data_in_search_paths(project):\n    search_path_keys = [\"FRAMEWORK_SEARCH_PATHS\", \"LIBRARY_SEARCH_PATHS\", \"HEADER_SEARCH_PATHS\"]\n    build_configs = project.target['buildConfigurationList']['buildConfigurations']\n    build_settings = filter(lambda x: x['name'] == os.environ['CONFIGURATION'], build_configs)[0]['buildSettings']\n    \n    found_something = False\n    for path_key in filter(lambda x: x in build_settings, search_path_keys):\n        path = build_settings[path_key]\n        if \"DerivedData\" in path:\n            found_something = True\n            log.warn(\"Derived data in %s\" % path)\n            issue_warning(\"'%s' contains reference to 'DerivedData'.\" % path_key)\n    if found_something:\n        log.warn(\"Check your build settings and remove any entries that contain paths inside the DerivedData folder.\")\n        log.warn(\"Otherwise you can disable this warning by changing 'config_warn_derived_data' in this script.\")\n\n# Link local architectures into their respective archives.\n#\ndef link_local_archs(project):\n    for arch in project.local_architectures:\n        print_and_call(project.get_single_arch_link_command(arch))\n\n# Link only the local architectures into the final product, not the slave\n# architectures. For iphoneos, this will be armv6, armv7. For simulator, this\n# will be i386.\n#\ndef link_combine_local_archs(project):\n    print_and_call(project.get_local_archs_link_command())\n\n# Link all architectures into the final product.\n#\ndef link_combine_all_archs(project):\n    print_and_call(project.get_all_archs_link_command())\n\n# Check if we should open the build directory after a successful build.\n#\ndef should_open_build_dir():\n    env_setting = os.environ.get('UFW_OPEN_BUILD_DIR', None)\n    if env_setting is not None:\n        return env_setting\n\n    return config_open_build_dir\n\n# Open the build dir in Finder.\n#\ndef open_build_dir():\n    print_and_call(['open', os.environ['TARGET_BUILD_DIR']])\n\n# Check if the build was started by selecting \"Archive\" under \"Product\" in\n# Xcode.\n#\ndef is_archive_build():\n    # ACTION is always 'build', but perhaps Apple will fix this someday?\n    archive_build = os.environ['ACTION'] == 'archive'\n\n    if not archive_build:\n        # This can be passed in as an env variable when building from command line.\n        archive_build = os.environ.get('UFW_ACTION', None) == 'archive'\n\n    build_dir = splitpath(os.environ['BUILD_DIR'])\n    if not archive_build:\n        # This partial path is used when you select \"archive\" from within Xcode.\n        archive_build = 'ArchiveIntermediates' in build_dir\n\n    # It only counts as a full archive build if this target is being built into\n    # its own build dir (not being built as a dependency of another target)\n    if archive_build:\n        archive_build = os.environ['TARGET_NAME'] in build_dir\n    \n    return archive_build\n\n# Xcode by default throws all public headers into the top level directory.\n# This function moves them to their expected deep hierarchy.\n#\ndef build_deep_header_hierarchy(project):\n    header_path_top = config_deep_header_top\n    if not header_path_top:\n        header_path_top = os.path.commonprefix(project.header_paths)\n    else:\n        header_path_top = splitpath(header_path_top)\n\n    built_headers_path = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['PUBLIC_HEADERS_FOLDER_PATH'])\n    movable_headers = project.movable_headers_relative_to(header_path_top)\n\n    # Remove subdirs if they only contain files that have been rebuilt\n    ignore_headers = filter(lambda x: not os.path.isfile(top_level_file_path(built_headers_path, x)), movable_headers)\n    remove_subdirs(built_headers_path, [file[0] for file in ignore_headers])\n\n    # Move rebuilt headers into their proper subdirs\n    for header in movable_headers:\n        move_file(top_level_file_path(built_headers_path, header), full_file_path(built_headers_path, header))\n\n# Add all symlinks needed to make a full framework structure:\n#\n# MyFramework.framework\n# |-- MyFramework -> Versions/Current/MyFramework\n# |-- Headers -> Versions/Current/Headers\n# |-- Resources -> Versions/Current/Resources\n# `-- Versions\n#     |-- A\n#     |   |-- MyFramework\n#     |   |-- Headers\n#     |   |   `-- MyFramework.h\n#     |   `-- Resources\n#     |       |-- Info.plist\n#     |       |-- MyViewController.nib\n#     |       `-- en.lproj\n#     |           `-- InfoPlist.strings\n#     `-- Current -> A\n#\ndef add_symlinks_to_framework(project):\n    base_dir = project.local_built_fw_path\n    attempt_symlink(os.path.join(base_dir, \"Versions\", \"Current\"), os.environ['FRAMEWORK_VERSION'])\n    if os.path.isdir(os.path.join(base_dir, \"Versions\", \"Current\", \"Headers\")):\n        attempt_symlink(os.path.join(base_dir, \"Headers\"), os.path.join(\"Versions\", \"Current\", \"Headers\"))\n    if os.path.isdir(os.path.join(base_dir, \"Versions\", \"Current\", \"Resources\")):\n        attempt_symlink(os.path.join(base_dir, \"Resources\"), os.path.join(\"Versions\", \"Current\", \"Resources\"))\n    attempt_symlink(os.path.join(base_dir, os.environ['EXECUTABLE_NAME']), os.path.join(\"Versions\", \"Current\", os.environ['EXECUTABLE_NAME']))\n\n# Build an embedded framework structure.\n# An embedded framework contains the actual framework, plus a \"Resources\"\n# directory containing symlinks to all resources found in the actual framework,\n# with the exception of \"Info.plist\" and anything ending in \".lproj\":\n#\n# MyFramework.embeddedframework\n# |-- MyFramework.framework\n# |   |-- MyFramework -> Versions/Current/MyFramework\n# |   |-- Headers -> Versions/Current/Headers\n# |   |-- Resources -> Versions/Current/Resources\n# |   `-- Versions\n# |       |-- A\n# |       |   |-- MyFramework\n# |       |   |-- Headers\n# |       |   |   `-- MyFramework.h\n# |       |   `-- Resources\n# |       |       |-- Info.plist\n# |       |       |-- MyViewController.nib\n# |       |       `-- en.lproj\n# |       |           `-- InfoPlist.strings\n# |       `-- Current -> A\n# `-- Resources\n#     `-- MyViewController.nib -> ../MyFramework.framework/Resources/MyViewController.nib\n#\ndef build_embedded_framework(project):\n    fw_path = project.local_built_fw_path\n    embedded_path = project.local_built_embedded_fw_path\n    fw_name = os.environ['WRAPPER_NAME']\n\n    if (os.path.islink(fw_path)):\n        # If the framework path is a link, the build result already in embeddedframework.\n        # Just recreate embeddedframework's Resources\n        remove_path(os.path.join(embedded_path, \"Resources\"))\n    else:\n        remove_path(embedded_path)\n        ensure_path_exists(embedded_path)\n        copy_overwrite(fw_path, os.path.join(embedded_path, fw_name))\n\n    # Create embeddedframework's Resources        \n    ensure_path_exists(os.path.join(embedded_path, \"Resources\"))\n    symlink_source = os.path.join(\"..\", fw_name, \"Resources\")\n    symlink_path = os.path.join(embedded_path, \"Resources\")\n    if os.path.isdir(os.path.join(fw_path, \"Resources\")):\n        for file in filter(lambda x: x != \"Info.plist\" and not x.endswith(\".lproj\"), os.listdir(os.path.join(fw_path, \"Resources\"))):\n            attempt_symlink(os.path.join(symlink_path, file), os.path.join(symlink_source, file))\n\n    # Remove the normal framework and replace it with a symlink to the copy\n    # in the embedded framework. This is needed because Xcode runs its strip\n    # phase AFTER the script runs.\n    embed_fw_wrapper = os.path.splitext(os.environ['WRAPPER_NAME'])[0] + \".embeddedframework\"\n    remove_path(fw_path)\n    attempt_symlink(fw_path, os.path.join(embed_fw_wrapper, os.environ['WRAPPER_NAME']))\n\n\n# Run the build process in slave mode to build the other configuration\n# (device/simulator).\n#\ndef run_slave_build(project):\n    print_and_call_slave_build(project.get_slave_project_build_command(), project.other_platform)\n\n# Run the build process.\n#\ndef run_build():\n    project = Project(os.path.join(os.environ['PROJECT_FILE_PATH'], \"project.pbxproj\"))\n\n    # Issue warnings only if we're master.\n    if is_master():\n        if len(project.compilable_sources) == 0:\n            raise Exception(\"No compilable sources found. Please add at least one source file to build target %s.\" % os.environ['TARGET_NAME'])\n\n        if config_warn_derived_data:\n            check_for_derived_data_in_search_paths(project)\n        if config_warn_no_public_headers and len(project.public_headers) == 0:\n            issue_warning('No headers in build target %s were marked public. Please move at least one header to \"Public\" in the \"Copy Headers\" build phase.' % os.environ['TARGET_NAME'])\n\n    # Only build slave if this is an archive build.\n    if is_archive_build():\n        if is_master():\n            log.debug(\"Building as MASTER\")\n            # The slave-side linker tries to include this (nonexistent) path as\n            # a library path.\n            ensure_path_exists(project.get_slave_environment()['BUILT_PRODUCTS_DIR'])\n            project.build_state.persist()\n            run_slave_build(project)\n            project.build_state.reload()\n        else:\n            log.debug(\"Building as SLAVE\")\n            project.build_state.reload()\n            project.build_state.set_slave_properties(project.local_architectures,\n                                                     project.local_linked_archive_paths,\n                                                     project.local_built_fw_path,\n                                                     project.local_built_embedded_fw_path)\n            project.build_state.persist()\n\n    link_local_archs(project)\n    \n    # Only do a universal binary when building an archive.\n    if is_archive_build() and is_master():\n        link_combine_all_archs(project)\n    else:\n        link_combine_local_archs(project)\n\n    if config_deep_header_hierarchy:\n        build_deep_header_hierarchy(project)\n\n    add_symlinks_to_framework(project)\n    \n    if is_master():\n        if config_framework_type == 'embeddedframework':\n            build_embedded_framework(project)\n        elif config_framework_type != 'framework':\n            raise Exception(\"%s: Unknown framework type for config_framework_type\" % config_framework_type)\n\n\nif __name__ == \"__main__\":\n    log_handler = logging.StreamHandler()\n    log_handler.setFormatter(logging.Formatter(\"%(name)s (\" + os.environ['PLATFORM_NAME'] + \"): %(levelname)s: %(message)s\"))\n    log.addHandler(log_handler)\n    log.setLevel(config_log_level)\n\n    error_code = 0\n    prefix = \"M\" if is_master() else \"S\"\n    log_handler.setFormatter(logging.Formatter(\"%(name)s (\" + prefix + \" \" + os.environ['PLATFORM_NAME'] + \"): %(levelname)s: %(message)s\"))\n\n    log.debug(\"Begin build process\")\n\n    if config_deep_header_top:\n        config_deep_header_top = string.Template(config_deep_header_top).substitute(os.environ)\n\n    try:\n        run_build()\n        if issued_warnings:\n            if config_fail_on_warnings:\n                error_code = 1\n            log.warn(\"Build completed with warnings\")\n        else:\n            log.info(\"Build completed\")\n        if not is_archive_build():\n            log.info(\"Note: This is *NOT* a universal framework build. To build as a universal framework, do an archive build.\")\n            log.info(\"To do an archive build from command line, use \\\"xcodebuild -configuration Release UFW_ACTION=archive clean build\\\"\")\n    except Exception:\n        traceback.print_exc(file=sys.stdout)\n        error_code = 1\n        log.error(\"Build failed\")\n    finally:\n        if error_code == 0 and is_archive_build() and is_master():\n            log.info(\"Built framework is in \" + os.environ['TARGET_BUILD_DIR'])\n            if should_open_build_dir():\n                open_build_dir()\n        sys.exit(error_code)\n";
		};
/* End PBXShellScriptBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		D4E8A802185BAFDC00A841EE /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				F114D322190AF2440008BE3C /* PCFPersistentStorage+Analytics.m in Sources */,
				F18D89CB18E5D6610084D142 /* PCFPushSDK.m in Sources */,
				F114D2EA190AA87A0008BE3C /* PCFAnalyticsURLConnection.m in Sources */,
				F114D334190EA7700008BE3C /* PCFPushURLConnection.m in Sources */,
				F114D31D190AF13E0008BE3C /* PCFPersistentStorage+Push.m in Sources */,
				F114D2D4190AA87A0008BE3C /* PCFAppDelegateProxy.m in Sources */,
				F114D2EE190AA87A0008BE3C /* PCFCoreDataManager.m in Sources */,
				F114D2E2190AA87A0008BE3C /* PCFPushErrorUtil.m in Sources */,
				F114D2F0190AA87A0008BE3C /* PCFAnalytics.m in Sources */,
				F114D2E4190AA87A0008BE3C /* PCFHardwareUtil.m in Sources */,
				F114D2EC190AA87A0008BE3C /* PCFAnalyticEvent.m in Sources */,
				F114D319190AF1110008BE3C /* PCFPersistentStorage.m in Sources */,
				F114D2D0190AA87A0008BE3C /* NSObject+PCFJsonizable.m in Sources */,
				F18D89C918E5D6610084D142 /* PCFPushRegistrationResponseData.m in Sources */,
				F114D2E8190AA87A0008BE3C /* PCFPushAppDelegate+Analytics.m in Sources */,
				F114D2E6190AA87A0008BE3C /* PCFPushHexUtil.m in Sources */,
				F114D2D8190AA87A0008BE3C /* PCFParameters.m in Sources */,
				F114D326190AF24B0008BE3C /* PCFSDK+Analytics.m in Sources */,
				F18D89C718E5D6610084D142 /* PCFPushRegistrationRequestData.m in Sources */,
				F114D2E0190AA87A0008BE3C /* PCFPushDebug.m in Sources */,
				F18761E2191C03D00069B9B2 /* PCFNotifications.m in Sources */,
				F1899FB61911A21100327394 /* NSURLConnection+PCFBackEndConnection.m in Sources */,
				F114D2DE190AA87A0008BE3C /* PCFJSONValueTransformer.m in Sources */,
				F18D89C518E5D6610084D142 /* PCFPushRegistrationData.m in Sources */,
				F114D2D2190AA87A0008BE3C /* PCFAppDelegate.m in Sources */,
				F114D2D6190AA87A0008BE3C /* PCFClient.m in Sources */,
				F114D2731908429E0008BE3C /* PCFPushClient.m in Sources */,
				F114D2DA190AA87A0008BE3C /* PCFSDK.m in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		F1B600F81922A0A300B65371 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				F1B600F91922A0A300B65371 /* PCFPersistentStorage+Analytics.m in Sources */,
				F1B600FB1922A0A300B65371 /* PCFAnalyticsURLConnection.m in Sources */,
				F1B600FE1922A0A300B65371 /* PCFAppDelegateProxy.m in Sources */,
				F1B600FF1922A0A300B65371 /* PCFCoreDataManager.m in Sources */,
				F1B601001922A0A300B65371 /* PCFPushErrorUtil.m in Sources */,
				F1B601011922A0A300B65371 /* PCFAnalytics.m in Sources */,
				F1B601021922A0A300B65371 /* PCFHardwareUtil.m in Sources */,
				F1B601031922A0A300B65371 /* PCFAnalyticEvent.m in Sources */,
				F1B601041922A0A300B65371 /* PCFPersistentStorage.m in Sources */,
				F1B601051922A0A300B65371 /* NSObject+PCFJsonizable.m in Sources */,
				F1B601071922A0A300B65371 /* PCFPushAppDelegate+Analytics.m in Sources */,
				F1B601091922A0A300B65371 /* PCFParameters.m in Sources */,
				F1B6010A1922A0A300B65371 /* PCFSDK+Analytics.m in Sources */,
				F1B6010C1922A0A300B65371 /* PCFPushDebug.m in Sources */,
				F1B6010D1922A0A300B65371 /* PCFNotifications.m in Sources */,
				F1B6010E1922A0A300B65371 /* NSURLConnection+PCFBackEndConnection.m in Sources */,
				F1B6010F1922A0A300B65371 /* PCFJSONValueTransformer.m in Sources */,
				F1B601111922A0A300B65371 /* PCFAppDelegate.m in Sources */,
				F1B601121922A0A300B65371 /* PCFClient.m in Sources */,
				F1B601131922A0A300B65371 /* PCFPushClient.m in Sources */,
				F1B601141922A0A300B65371 /* PCFSDK.m in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		F1B601401922A12500B65371 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				F1B601421922A12500B65371 /* PCFPushSDK.m in Sources */,
				F1B601441922A12500B65371 /* PCFPushURLConnection.m in Sources */,
				F1B601451922A12500B65371 /* PCFPersistentStorage+Push.m in Sources */,
				F1B601461922A12500B65371 /* PCFAppDelegateProxy.m in Sources */,
				F1B601481922A12500B65371 /* PCFPushErrorUtil.m in Sources */,
				F1B6014A1922A12500B65371 /* PCFHardwareUtil.m in Sources */,
				F1B6014C1922A12500B65371 /* PCFPersistentStorage.m in Sources */,
				F1B6014D1922A12500B65371 /* NSObject+PCFJsonizable.m in Sources */,
				F1B6014E1922A12500B65371 /* PCFPushRegistrationResponseData.m in Sources */,
				F1B601501922A12500B65371 /* PCFPushHexUtil.m in Sources */,
				F1B601511922A12500B65371 /* PCFParameters.m in Sources */,
				F1B601531922A12500B65371 /* PCFPushRegistrationRequestData.m in Sources */,
				F1B601541922A12500B65371 /* PCFPushDebug.m in Sources */,
				F1B601551922A12500B65371 /* PCFNotifications.m in Sources */,
				F1B601561922A12500B65371 /* NSURLConnection+PCFBackEndConnection.m in Sources */,
				F1B601571922A12500B65371 /* PCFJSONValueTransformer.m in Sources */,
				F1B601581922A12500B65371 /* PCFPushRegistrationData.m in Sources */,
				F1B601591922A12500B65371 /* PCFAppDelegate.m in Sources */,
				F1B6015A1922A12500B65371 /* PCFClient.m in Sources */,
				F1B6015B1922A12500B65371 /* PCFPushClient.m in Sources */,
				F1B6015C1922A12500B65371 /* PCFSDK.m in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin PBXVariantGroup section */
		F1B6019A1923B6EA00B65371 /* InfoPlist.strings */ = {
			isa = PBXVariantGroup;
			children = (
				F1B6019B1923B6EA00B65371 /* en */,
			);
			name = InfoPlist.strings;
			sourceTree = "<group>";
		};
/* End PBXVariantGroup section */

/* Begin XCBuildConfiguration section */
		D4E8A817185BAFDC00A841EE /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 6.0;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = iphoneos;
			};
			name = Debug;
		};
		D4E8A818185BAFDC00A841EE /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = YES;
				ENABLE_NS_ASSERTIONS = NO;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 6.0;
				SDKROOT = iphoneos;
				VALIDATE_PRODUCT = YES;
			};
			name = Release;
		};
		D4E8A81A185BAFDC00A841EE /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				DYLIB_COMPATIBILITY_VERSION = 1;
				DYLIB_CURRENT_VERSION = 1;
				FRAMEWORK_VERSION = A;
				GCC_GENERATE_TEST_COVERAGE_FILES = NO;
				GCC_INSTRUMENT_PROGRAM_FLOW_ARCS = NO;
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "PCFFramework/PCFCompleteSDK-Prefix.pch";
				INFOPLIST_FILE = "PCFFramework/PCFCompleteSDK-Info.plist";
				PRODUCT_NAME = PCFCompleteSDK;
				SKIP_INSTALL = YES;
				WRAPPER_EXTENSION = framework;
			};
			name = Debug;
		};
		D4E8A81B185BAFDC00A841EE /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				DYLIB_COMPATIBILITY_VERSION = 1;
				DYLIB_CURRENT_VERSION = 1;
				FRAMEWORK_VERSION = A;
				GCC_GENERATE_TEST_COVERAGE_FILES = NO;
				GCC_INSTRUMENT_PROGRAM_FLOW_ARCS = NO;
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "PCFFramework/PCFCompleteSDK-Prefix.pch";
				INFOPLIST_FILE = "PCFFramework/PCFCompleteSDK-Info.plist";
				PRODUCT_NAME = PCFCompleteSDK;
				SKIP_INSTALL = YES;
				WRAPPER_EXTENSION = framework;
			};
			name = Release;
		};
		F1B6013A1922A0A300B65371 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				DYLIB_COMPATIBILITY_VERSION = 1;
				DYLIB_CURRENT_VERSION = 1;
				FRAMEWORK_VERSION = A;
				GCC_GENERATE_TEST_COVERAGE_FILES = NO;
				GCC_INSTRUMENT_PROGRAM_FLOW_ARCS = NO;
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "PCFFramework/PCFCompleteSDK-Prefix.pch";
				INFOPLIST_FILE = "PCFFramework/PCFCompleteSDK-Info.plist";
				PRODUCT_NAME = PCFAnalyticsSDK;
				SKIP_INSTALL = YES;
				WRAPPER_EXTENSION = framework;
			};
			name = Debug;
		};
		F1B6013B1922A0A300B65371 /* Coverage */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				DYLIB_COMPATIBILITY_VERSION = 1;
				DYLIB_CURRENT_VERSION = 1;
				FRAMEWORK_VERSION = A;
				GCC_GENERATE_TEST_COVERAGE_FILES = YES;
				GCC_INSTRUMENT_PROGRAM_FLOW_ARCS = YES;
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "PCFFramework/PCFCompleteSDK-Prefix.pch";
				INFOPLIST_FILE = "PCFFramework/PCFCompleteSDK-Info.plist";
				PRODUCT_NAME = PCFAnalyticsSDK;
				SKIP_INSTALL = YES;
				WRAPPER_EXTENSION = framework;
			};
			name = Coverage;
		};
		F1B6013C1922A0A300B65371 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				DYLIB_COMPATIBILITY_VERSION = 1;
				DYLIB_CURRENT_VERSION = 1;
				FRAMEWORK_VERSION = A;
				GCC_GENERATE_TEST_COVERAGE_FILES = NO;
				GCC_INSTRUMENT_PROGRAM_FLOW_ARCS = NO;
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "PCFFramework/PCFCompleteSDK-Prefix.pch";
				INFOPLIST_FILE = "PCFFramework/PCFCompleteSDK-Info.plist";
				PRODUCT_NAME = PCFAnalyticsSDK;
				SKIP_INSTALL = YES;
				WRAPPER_EXTENSION = framework;
			};
			name = Release;
		};
		F1B601821922A12500B65371 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				DYLIB_COMPATIBILITY_VERSION = 1;
				DYLIB_CURRENT_VERSION = 1;
				FRAMEWORK_VERSION = A;
				GCC_GENERATE_TEST_COVERAGE_FILES = NO;
				GCC_INSTRUMENT_PROGRAM_FLOW_ARCS = NO;
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "PCFFramework/PCFCompleteSDK-Prefix.pch";
				INFOPLIST_FILE = "PCFFramework/PCFCompleteSDK-Info.plist";
				PRODUCT_NAME = PCFPushSDK;
				SKIP_INSTALL = YES;
				WRAPPER_EXTENSION = framework;
			};
			name = Debug;
		};
		F1B601831922A12500B65371 /* Coverage */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				DYLIB_COMPATIBILITY_VERSION = 1;
				DYLIB_CURRENT_VERSION = 1;
				FRAMEWORK_VERSION = A;
				GCC_GENERATE_TEST_COVERAGE_FILES = YES;
				GCC_INSTRUMENT_PROGRAM_FLOW_ARCS = YES;
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "PCFFramework/PCFCompleteSDK-Prefix.pch";
				INFOPLIST_FILE = "PCFFramework/PCFCompleteSDK-Info.plist";
				PRODUCT_NAME = PCFPushSDK;
				SKIP_INSTALL = YES;
				WRAPPER_EXTENSION = framework;
			};
			name = Coverage;
		};
		F1B601841922A12500B65371 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				DYLIB_COMPATIBILITY_VERSION = 1;
				DYLIB_CURRENT_VERSION = 1;
				FRAMEWORK_VERSION = A;
				GCC_GENERATE_TEST_COVERAGE_FILES = NO;
				GCC_INSTRUMENT_PROGRAM_FLOW_ARCS = NO;
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "PCFFramework/PCFCompleteSDK-Prefix.pch";
				INFOPLIST_FILE = "PCFFramework/PCFCompleteSDK-Info.plist";
				PRODUCT_NAME = PCFPushSDK;
				SKIP_INSTALL = YES;
				WRAPPER_EXTENSION = framework;
			};
			name = Release;
		};
		F1DA268A18DB3B9800F6B191 /* Coverage */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 6.0;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = iphoneos;
			};
			name = Coverage;
		};
		F1DA268B18DB3B9800F6B191 /* Coverage */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				DYLIB_COMPATIBILITY_VERSION = 1;
				DYLIB_CURRENT_VERSION = 1;
				FRAMEWORK_VERSION = A;
				GCC_GENERATE_TEST_COVERAGE_FILES = YES;
				GCC_INSTRUMENT_PROGRAM_FLOW_ARCS = YES;
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "PCFFramework/PCFCompleteSDK-Prefix.pch";
				INFOPLIST_FILE = "PCFFramework/PCFCompleteSDK-Info.plist";
				PRODUCT_NAME = PCFCompleteSDK;
				SKIP_INSTALL = YES;
				WRAPPER_EXTENSION = framework;
			};
			name = Coverage;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		D4E8A801185BAFDC00A841EE /* Build configuration list for PBXProject "PCFPushSDK" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				D4E8A817185BAFDC00A841EE /* Debug */,
				F1DA268A18DB3B9800F6B191 /* Coverage */,
				D4E8A818185BAFDC00A841EE /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		D4E8A819185BAFDC00A841EE /* Build configuration list for PBXNativeTarget "PCFCompleteSDK" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				D4E8A81A185BAFDC00A841EE /* Debug */,
				F1DA268B18DB3B9800F6B191 /* Coverage */,
				D4E8A81B185BAFDC00A841EE /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		F1B601391922A0A300B65371 /* Build configuration list for PBXNativeTarget "PCFAnalyticsSDK" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				F1B6013A1922A0A300B65371 /* Debug */,
				F1B6013B1922A0A300B65371 /* Coverage */,
				F1B6013C1922A0A300B65371 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		F1B601811922A12500B65371 /* Build configuration list for PBXNativeTarget "PCFPushSDK" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				F1B601821922A12500B65371 /* Debug */,
				F1B601831922A12500B65371 /* Coverage */,
				F1B601841922A12500B65371 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = D4E8A7FE185BAFDC00A841EE /* Project object */;
}
